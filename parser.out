Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    setxy

Grammar

Rule 0     S' -> program
Rule 1     program -> command
Rule 2     program -> program command
Rule 3     command -> forward expression
Rule 4     command -> fd expression
Rule 5     command -> right value
Rule 6     command -> rt value
Rule 7     command -> left value
Rule 8     command -> lt value
Rule 9     command -> back value
Rule 10    command -> bk value
Rule 11    command -> setpos [ value value ]
Rule 12    command -> setpos value value
Rule 13    command -> setx value
Rule 14    command -> sety value
Rule 15    command -> home
Rule 16    command -> pendown
Rule 17    command -> pd
Rule 18    command -> penup
Rule 19    command -> pu
Rule 20    command -> setpencolor [ color ]
Rule 21    color -> value value value
Rule 22    value -> NUMBER
Rule 23    value -> VAR
Rule 24    command -> make VAR value
Rule 25    command -> make VAR expression
Rule 26    expression -> value OPERATION value
Rule 27    expression -> value
Rule 28    command -> if value SIGN value [ program ]
Rule 29    command -> ifelse value SIGN value [ program ]
Rule 30    command -> repeat value [ program ]
Rule 31    command -> while [ value SIGN value ] [ program ]

Terminals, with rules where they appear

NUMBER               : 22
OPERATION            : 26
SIGN                 : 28 29 31
VAR                  : 23 24 25
[                    : 11 20 28 29 30 31 31
]                    : 11 20 28 29 30 31 31
back                 : 9
bk                   : 10
error                : 
fd                   : 4
forward              : 3
home                 : 15
if                   : 28
ifelse               : 29
left                 : 7
lt                   : 8
make                 : 24 25
pd                   : 17
pendown              : 16
penup                : 18
pu                   : 19
repeat               : 30
right                : 5
rt                   : 6
setpencolor          : 20
setpos               : 11 12
setx                 : 13
setxy                : 
sety                 : 14
while                : 31

Nonterminals, with rules where they appear

color                : 20
command              : 1 2
expression           : 3 4 25
program              : 2 28 29 30 31 0
value                : 5 6 7 8 9 10 11 11 12 12 13 14 21 21 21 24 26 26 27 28 28 29 29 30 31 31

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . forward expression
    (4) command -> . fd expression
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (24) command -> . make VAR value
    (25) command -> . make VAR expression
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ]
    (30) command -> . repeat value [ program ]
    (31) command -> . while [ value SIGN value ] [ program ]

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24

    program                        shift and go to state 1
    command                        shift and go to state 2

state 1

    (0) S' -> program .
    (2) program -> program . command
    (3) command -> . forward expression
    (4) command -> . fd expression
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (24) command -> . make VAR value
    (25) command -> . make VAR expression
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ]
    (30) command -> . repeat value [ program ]
    (31) command -> . while [ value SIGN value ] [ program ]

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24

    command                        shift and go to state 25

state 2

    (1) program -> command .

    forward         reduce using rule 1 (program -> command .)
    fd              reduce using rule 1 (program -> command .)
    right           reduce using rule 1 (program -> command .)
    rt              reduce using rule 1 (program -> command .)
    left            reduce using rule 1 (program -> command .)
    lt              reduce using rule 1 (program -> command .)
    back            reduce using rule 1 (program -> command .)
    bk              reduce using rule 1 (program -> command .)
    setpos          reduce using rule 1 (program -> command .)
    setx            reduce using rule 1 (program -> command .)
    sety            reduce using rule 1 (program -> command .)
    home            reduce using rule 1 (program -> command .)
    pendown         reduce using rule 1 (program -> command .)
    pd              reduce using rule 1 (program -> command .)
    penup           reduce using rule 1 (program -> command .)
    pu              reduce using rule 1 (program -> command .)
    setpencolor     reduce using rule 1 (program -> command .)
    make            reduce using rule 1 (program -> command .)
    if              reduce using rule 1 (program -> command .)
    ifelse          reduce using rule 1 (program -> command .)
    repeat          reduce using rule 1 (program -> command .)
    while           reduce using rule 1 (program -> command .)
    $end            reduce using rule 1 (program -> command .)
    ]               reduce using rule 1 (program -> command .)


state 3

    (3) command -> forward . expression
    (26) expression -> . value OPERATION value
    (27) expression -> . value
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    expression                     shift and go to state 26
    value                          shift and go to state 27

state 4

    (4) command -> fd . expression
    (26) expression -> . value OPERATION value
    (27) expression -> . value
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    expression                     shift and go to state 30
    value                          shift and go to state 27

state 5

    (5) command -> right . value
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 31

state 6

    (6) command -> rt . value
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 32

state 7

    (7) command -> left . value
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 33

state 8

    (8) command -> lt . value
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 34

state 9

    (9) command -> back . value
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 35

state 10

    (10) command -> bk . value
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 36

state 11

    (11) command -> setpos . [ value value ]
    (12) command -> setpos . value value
    (22) value -> . NUMBER
    (23) value -> . VAR

    [               shift and go to state 37
    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 38

state 12

    (13) command -> setx . value
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 39

state 13

    (14) command -> sety . value
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 40

state 14

    (15) command -> home .

    forward         reduce using rule 15 (command -> home .)
    fd              reduce using rule 15 (command -> home .)
    right           reduce using rule 15 (command -> home .)
    rt              reduce using rule 15 (command -> home .)
    left            reduce using rule 15 (command -> home .)
    lt              reduce using rule 15 (command -> home .)
    back            reduce using rule 15 (command -> home .)
    bk              reduce using rule 15 (command -> home .)
    setpos          reduce using rule 15 (command -> home .)
    setx            reduce using rule 15 (command -> home .)
    sety            reduce using rule 15 (command -> home .)
    home            reduce using rule 15 (command -> home .)
    pendown         reduce using rule 15 (command -> home .)
    pd              reduce using rule 15 (command -> home .)
    penup           reduce using rule 15 (command -> home .)
    pu              reduce using rule 15 (command -> home .)
    setpencolor     reduce using rule 15 (command -> home .)
    make            reduce using rule 15 (command -> home .)
    if              reduce using rule 15 (command -> home .)
    ifelse          reduce using rule 15 (command -> home .)
    repeat          reduce using rule 15 (command -> home .)
    while           reduce using rule 15 (command -> home .)
    $end            reduce using rule 15 (command -> home .)
    ]               reduce using rule 15 (command -> home .)


state 15

    (16) command -> pendown .

    forward         reduce using rule 16 (command -> pendown .)
    fd              reduce using rule 16 (command -> pendown .)
    right           reduce using rule 16 (command -> pendown .)
    rt              reduce using rule 16 (command -> pendown .)
    left            reduce using rule 16 (command -> pendown .)
    lt              reduce using rule 16 (command -> pendown .)
    back            reduce using rule 16 (command -> pendown .)
    bk              reduce using rule 16 (command -> pendown .)
    setpos          reduce using rule 16 (command -> pendown .)
    setx            reduce using rule 16 (command -> pendown .)
    sety            reduce using rule 16 (command -> pendown .)
    home            reduce using rule 16 (command -> pendown .)
    pendown         reduce using rule 16 (command -> pendown .)
    pd              reduce using rule 16 (command -> pendown .)
    penup           reduce using rule 16 (command -> pendown .)
    pu              reduce using rule 16 (command -> pendown .)
    setpencolor     reduce using rule 16 (command -> pendown .)
    make            reduce using rule 16 (command -> pendown .)
    if              reduce using rule 16 (command -> pendown .)
    ifelse          reduce using rule 16 (command -> pendown .)
    repeat          reduce using rule 16 (command -> pendown .)
    while           reduce using rule 16 (command -> pendown .)
    $end            reduce using rule 16 (command -> pendown .)
    ]               reduce using rule 16 (command -> pendown .)


state 16

    (17) command -> pd .

    forward         reduce using rule 17 (command -> pd .)
    fd              reduce using rule 17 (command -> pd .)
    right           reduce using rule 17 (command -> pd .)
    rt              reduce using rule 17 (command -> pd .)
    left            reduce using rule 17 (command -> pd .)
    lt              reduce using rule 17 (command -> pd .)
    back            reduce using rule 17 (command -> pd .)
    bk              reduce using rule 17 (command -> pd .)
    setpos          reduce using rule 17 (command -> pd .)
    setx            reduce using rule 17 (command -> pd .)
    sety            reduce using rule 17 (command -> pd .)
    home            reduce using rule 17 (command -> pd .)
    pendown         reduce using rule 17 (command -> pd .)
    pd              reduce using rule 17 (command -> pd .)
    penup           reduce using rule 17 (command -> pd .)
    pu              reduce using rule 17 (command -> pd .)
    setpencolor     reduce using rule 17 (command -> pd .)
    make            reduce using rule 17 (command -> pd .)
    if              reduce using rule 17 (command -> pd .)
    ifelse          reduce using rule 17 (command -> pd .)
    repeat          reduce using rule 17 (command -> pd .)
    while           reduce using rule 17 (command -> pd .)
    $end            reduce using rule 17 (command -> pd .)
    ]               reduce using rule 17 (command -> pd .)


state 17

    (18) command -> penup .

    forward         reduce using rule 18 (command -> penup .)
    fd              reduce using rule 18 (command -> penup .)
    right           reduce using rule 18 (command -> penup .)
    rt              reduce using rule 18 (command -> penup .)
    left            reduce using rule 18 (command -> penup .)
    lt              reduce using rule 18 (command -> penup .)
    back            reduce using rule 18 (command -> penup .)
    bk              reduce using rule 18 (command -> penup .)
    setpos          reduce using rule 18 (command -> penup .)
    setx            reduce using rule 18 (command -> penup .)
    sety            reduce using rule 18 (command -> penup .)
    home            reduce using rule 18 (command -> penup .)
    pendown         reduce using rule 18 (command -> penup .)
    pd              reduce using rule 18 (command -> penup .)
    penup           reduce using rule 18 (command -> penup .)
    pu              reduce using rule 18 (command -> penup .)
    setpencolor     reduce using rule 18 (command -> penup .)
    make            reduce using rule 18 (command -> penup .)
    if              reduce using rule 18 (command -> penup .)
    ifelse          reduce using rule 18 (command -> penup .)
    repeat          reduce using rule 18 (command -> penup .)
    while           reduce using rule 18 (command -> penup .)
    $end            reduce using rule 18 (command -> penup .)
    ]               reduce using rule 18 (command -> penup .)


state 18

    (19) command -> pu .

    forward         reduce using rule 19 (command -> pu .)
    fd              reduce using rule 19 (command -> pu .)
    right           reduce using rule 19 (command -> pu .)
    rt              reduce using rule 19 (command -> pu .)
    left            reduce using rule 19 (command -> pu .)
    lt              reduce using rule 19 (command -> pu .)
    back            reduce using rule 19 (command -> pu .)
    bk              reduce using rule 19 (command -> pu .)
    setpos          reduce using rule 19 (command -> pu .)
    setx            reduce using rule 19 (command -> pu .)
    sety            reduce using rule 19 (command -> pu .)
    home            reduce using rule 19 (command -> pu .)
    pendown         reduce using rule 19 (command -> pu .)
    pd              reduce using rule 19 (command -> pu .)
    penup           reduce using rule 19 (command -> pu .)
    pu              reduce using rule 19 (command -> pu .)
    setpencolor     reduce using rule 19 (command -> pu .)
    make            reduce using rule 19 (command -> pu .)
    if              reduce using rule 19 (command -> pu .)
    ifelse          reduce using rule 19 (command -> pu .)
    repeat          reduce using rule 19 (command -> pu .)
    while           reduce using rule 19 (command -> pu .)
    $end            reduce using rule 19 (command -> pu .)
    ]               reduce using rule 19 (command -> pu .)


state 19

    (20) command -> setpencolor . [ color ]

    [               shift and go to state 41


state 20

    (24) command -> make . VAR value
    (25) command -> make . VAR expression

    VAR             shift and go to state 42


state 21

    (28) command -> if . value SIGN value [ program ]
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 43

state 22

    (29) command -> ifelse . value SIGN value [ program ]
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 44

state 23

    (30) command -> repeat . value [ program ]
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 45

state 24

    (31) command -> while . [ value SIGN value ] [ program ]

    [               shift and go to state 46


state 25

    (2) program -> program command .

    forward         reduce using rule 2 (program -> program command .)
    fd              reduce using rule 2 (program -> program command .)
    right           reduce using rule 2 (program -> program command .)
    rt              reduce using rule 2 (program -> program command .)
    left            reduce using rule 2 (program -> program command .)
    lt              reduce using rule 2 (program -> program command .)
    back            reduce using rule 2 (program -> program command .)
    bk              reduce using rule 2 (program -> program command .)
    setpos          reduce using rule 2 (program -> program command .)
    setx            reduce using rule 2 (program -> program command .)
    sety            reduce using rule 2 (program -> program command .)
    home            reduce using rule 2 (program -> program command .)
    pendown         reduce using rule 2 (program -> program command .)
    pd              reduce using rule 2 (program -> program command .)
    penup           reduce using rule 2 (program -> program command .)
    pu              reduce using rule 2 (program -> program command .)
    setpencolor     reduce using rule 2 (program -> program command .)
    make            reduce using rule 2 (program -> program command .)
    if              reduce using rule 2 (program -> program command .)
    ifelse          reduce using rule 2 (program -> program command .)
    repeat          reduce using rule 2 (program -> program command .)
    while           reduce using rule 2 (program -> program command .)
    $end            reduce using rule 2 (program -> program command .)
    ]               reduce using rule 2 (program -> program command .)


state 26

    (3) command -> forward expression .

    forward         reduce using rule 3 (command -> forward expression .)
    fd              reduce using rule 3 (command -> forward expression .)
    right           reduce using rule 3 (command -> forward expression .)
    rt              reduce using rule 3 (command -> forward expression .)
    left            reduce using rule 3 (command -> forward expression .)
    lt              reduce using rule 3 (command -> forward expression .)
    back            reduce using rule 3 (command -> forward expression .)
    bk              reduce using rule 3 (command -> forward expression .)
    setpos          reduce using rule 3 (command -> forward expression .)
    setx            reduce using rule 3 (command -> forward expression .)
    sety            reduce using rule 3 (command -> forward expression .)
    home            reduce using rule 3 (command -> forward expression .)
    pendown         reduce using rule 3 (command -> forward expression .)
    pd              reduce using rule 3 (command -> forward expression .)
    penup           reduce using rule 3 (command -> forward expression .)
    pu              reduce using rule 3 (command -> forward expression .)
    setpencolor     reduce using rule 3 (command -> forward expression .)
    make            reduce using rule 3 (command -> forward expression .)
    if              reduce using rule 3 (command -> forward expression .)
    ifelse          reduce using rule 3 (command -> forward expression .)
    repeat          reduce using rule 3 (command -> forward expression .)
    while           reduce using rule 3 (command -> forward expression .)
    $end            reduce using rule 3 (command -> forward expression .)
    ]               reduce using rule 3 (command -> forward expression .)


state 27

    (26) expression -> value . OPERATION value
    (27) expression -> value .

    OPERATION       shift and go to state 47
    forward         reduce using rule 27 (expression -> value .)
    fd              reduce using rule 27 (expression -> value .)
    right           reduce using rule 27 (expression -> value .)
    rt              reduce using rule 27 (expression -> value .)
    left            reduce using rule 27 (expression -> value .)
    lt              reduce using rule 27 (expression -> value .)
    back            reduce using rule 27 (expression -> value .)
    bk              reduce using rule 27 (expression -> value .)
    setpos          reduce using rule 27 (expression -> value .)
    setx            reduce using rule 27 (expression -> value .)
    sety            reduce using rule 27 (expression -> value .)
    home            reduce using rule 27 (expression -> value .)
    pendown         reduce using rule 27 (expression -> value .)
    pd              reduce using rule 27 (expression -> value .)
    penup           reduce using rule 27 (expression -> value .)
    pu              reduce using rule 27 (expression -> value .)
    setpencolor     reduce using rule 27 (expression -> value .)
    make            reduce using rule 27 (expression -> value .)
    if              reduce using rule 27 (expression -> value .)
    ifelse          reduce using rule 27 (expression -> value .)
    repeat          reduce using rule 27 (expression -> value .)
    while           reduce using rule 27 (expression -> value .)
    $end            reduce using rule 27 (expression -> value .)
    ]               reduce using rule 27 (expression -> value .)


state 28

    (22) value -> NUMBER .

    OPERATION       reduce using rule 22 (value -> NUMBER .)
    forward         reduce using rule 22 (value -> NUMBER .)
    fd              reduce using rule 22 (value -> NUMBER .)
    right           reduce using rule 22 (value -> NUMBER .)
    rt              reduce using rule 22 (value -> NUMBER .)
    left            reduce using rule 22 (value -> NUMBER .)
    lt              reduce using rule 22 (value -> NUMBER .)
    back            reduce using rule 22 (value -> NUMBER .)
    bk              reduce using rule 22 (value -> NUMBER .)
    setpos          reduce using rule 22 (value -> NUMBER .)
    setx            reduce using rule 22 (value -> NUMBER .)
    sety            reduce using rule 22 (value -> NUMBER .)
    home            reduce using rule 22 (value -> NUMBER .)
    pendown         reduce using rule 22 (value -> NUMBER .)
    pd              reduce using rule 22 (value -> NUMBER .)
    penup           reduce using rule 22 (value -> NUMBER .)
    pu              reduce using rule 22 (value -> NUMBER .)
    setpencolor     reduce using rule 22 (value -> NUMBER .)
    make            reduce using rule 22 (value -> NUMBER .)
    if              reduce using rule 22 (value -> NUMBER .)
    ifelse          reduce using rule 22 (value -> NUMBER .)
    repeat          reduce using rule 22 (value -> NUMBER .)
    while           reduce using rule 22 (value -> NUMBER .)
    $end            reduce using rule 22 (value -> NUMBER .)
    ]               reduce using rule 22 (value -> NUMBER .)
    NUMBER          reduce using rule 22 (value -> NUMBER .)
    VAR             reduce using rule 22 (value -> NUMBER .)
    SIGN            reduce using rule 22 (value -> NUMBER .)
    [               reduce using rule 22 (value -> NUMBER .)


state 29

    (23) value -> VAR .

    OPERATION       reduce using rule 23 (value -> VAR .)
    forward         reduce using rule 23 (value -> VAR .)
    fd              reduce using rule 23 (value -> VAR .)
    right           reduce using rule 23 (value -> VAR .)
    rt              reduce using rule 23 (value -> VAR .)
    left            reduce using rule 23 (value -> VAR .)
    lt              reduce using rule 23 (value -> VAR .)
    back            reduce using rule 23 (value -> VAR .)
    bk              reduce using rule 23 (value -> VAR .)
    setpos          reduce using rule 23 (value -> VAR .)
    setx            reduce using rule 23 (value -> VAR .)
    sety            reduce using rule 23 (value -> VAR .)
    home            reduce using rule 23 (value -> VAR .)
    pendown         reduce using rule 23 (value -> VAR .)
    pd              reduce using rule 23 (value -> VAR .)
    penup           reduce using rule 23 (value -> VAR .)
    pu              reduce using rule 23 (value -> VAR .)
    setpencolor     reduce using rule 23 (value -> VAR .)
    make            reduce using rule 23 (value -> VAR .)
    if              reduce using rule 23 (value -> VAR .)
    ifelse          reduce using rule 23 (value -> VAR .)
    repeat          reduce using rule 23 (value -> VAR .)
    while           reduce using rule 23 (value -> VAR .)
    $end            reduce using rule 23 (value -> VAR .)
    ]               reduce using rule 23 (value -> VAR .)
    NUMBER          reduce using rule 23 (value -> VAR .)
    VAR             reduce using rule 23 (value -> VAR .)
    SIGN            reduce using rule 23 (value -> VAR .)
    [               reduce using rule 23 (value -> VAR .)


state 30

    (4) command -> fd expression .

    forward         reduce using rule 4 (command -> fd expression .)
    fd              reduce using rule 4 (command -> fd expression .)
    right           reduce using rule 4 (command -> fd expression .)
    rt              reduce using rule 4 (command -> fd expression .)
    left            reduce using rule 4 (command -> fd expression .)
    lt              reduce using rule 4 (command -> fd expression .)
    back            reduce using rule 4 (command -> fd expression .)
    bk              reduce using rule 4 (command -> fd expression .)
    setpos          reduce using rule 4 (command -> fd expression .)
    setx            reduce using rule 4 (command -> fd expression .)
    sety            reduce using rule 4 (command -> fd expression .)
    home            reduce using rule 4 (command -> fd expression .)
    pendown         reduce using rule 4 (command -> fd expression .)
    pd              reduce using rule 4 (command -> fd expression .)
    penup           reduce using rule 4 (command -> fd expression .)
    pu              reduce using rule 4 (command -> fd expression .)
    setpencolor     reduce using rule 4 (command -> fd expression .)
    make            reduce using rule 4 (command -> fd expression .)
    if              reduce using rule 4 (command -> fd expression .)
    ifelse          reduce using rule 4 (command -> fd expression .)
    repeat          reduce using rule 4 (command -> fd expression .)
    while           reduce using rule 4 (command -> fd expression .)
    $end            reduce using rule 4 (command -> fd expression .)
    ]               reduce using rule 4 (command -> fd expression .)


state 31

    (5) command -> right value .

    forward         reduce using rule 5 (command -> right value .)
    fd              reduce using rule 5 (command -> right value .)
    right           reduce using rule 5 (command -> right value .)
    rt              reduce using rule 5 (command -> right value .)
    left            reduce using rule 5 (command -> right value .)
    lt              reduce using rule 5 (command -> right value .)
    back            reduce using rule 5 (command -> right value .)
    bk              reduce using rule 5 (command -> right value .)
    setpos          reduce using rule 5 (command -> right value .)
    setx            reduce using rule 5 (command -> right value .)
    sety            reduce using rule 5 (command -> right value .)
    home            reduce using rule 5 (command -> right value .)
    pendown         reduce using rule 5 (command -> right value .)
    pd              reduce using rule 5 (command -> right value .)
    penup           reduce using rule 5 (command -> right value .)
    pu              reduce using rule 5 (command -> right value .)
    setpencolor     reduce using rule 5 (command -> right value .)
    make            reduce using rule 5 (command -> right value .)
    if              reduce using rule 5 (command -> right value .)
    ifelse          reduce using rule 5 (command -> right value .)
    repeat          reduce using rule 5 (command -> right value .)
    while           reduce using rule 5 (command -> right value .)
    $end            reduce using rule 5 (command -> right value .)
    ]               reduce using rule 5 (command -> right value .)


state 32

    (6) command -> rt value .

    forward         reduce using rule 6 (command -> rt value .)
    fd              reduce using rule 6 (command -> rt value .)
    right           reduce using rule 6 (command -> rt value .)
    rt              reduce using rule 6 (command -> rt value .)
    left            reduce using rule 6 (command -> rt value .)
    lt              reduce using rule 6 (command -> rt value .)
    back            reduce using rule 6 (command -> rt value .)
    bk              reduce using rule 6 (command -> rt value .)
    setpos          reduce using rule 6 (command -> rt value .)
    setx            reduce using rule 6 (command -> rt value .)
    sety            reduce using rule 6 (command -> rt value .)
    home            reduce using rule 6 (command -> rt value .)
    pendown         reduce using rule 6 (command -> rt value .)
    pd              reduce using rule 6 (command -> rt value .)
    penup           reduce using rule 6 (command -> rt value .)
    pu              reduce using rule 6 (command -> rt value .)
    setpencolor     reduce using rule 6 (command -> rt value .)
    make            reduce using rule 6 (command -> rt value .)
    if              reduce using rule 6 (command -> rt value .)
    ifelse          reduce using rule 6 (command -> rt value .)
    repeat          reduce using rule 6 (command -> rt value .)
    while           reduce using rule 6 (command -> rt value .)
    $end            reduce using rule 6 (command -> rt value .)
    ]               reduce using rule 6 (command -> rt value .)


state 33

    (7) command -> left value .

    forward         reduce using rule 7 (command -> left value .)
    fd              reduce using rule 7 (command -> left value .)
    right           reduce using rule 7 (command -> left value .)
    rt              reduce using rule 7 (command -> left value .)
    left            reduce using rule 7 (command -> left value .)
    lt              reduce using rule 7 (command -> left value .)
    back            reduce using rule 7 (command -> left value .)
    bk              reduce using rule 7 (command -> left value .)
    setpos          reduce using rule 7 (command -> left value .)
    setx            reduce using rule 7 (command -> left value .)
    sety            reduce using rule 7 (command -> left value .)
    home            reduce using rule 7 (command -> left value .)
    pendown         reduce using rule 7 (command -> left value .)
    pd              reduce using rule 7 (command -> left value .)
    penup           reduce using rule 7 (command -> left value .)
    pu              reduce using rule 7 (command -> left value .)
    setpencolor     reduce using rule 7 (command -> left value .)
    make            reduce using rule 7 (command -> left value .)
    if              reduce using rule 7 (command -> left value .)
    ifelse          reduce using rule 7 (command -> left value .)
    repeat          reduce using rule 7 (command -> left value .)
    while           reduce using rule 7 (command -> left value .)
    $end            reduce using rule 7 (command -> left value .)
    ]               reduce using rule 7 (command -> left value .)


state 34

    (8) command -> lt value .

    forward         reduce using rule 8 (command -> lt value .)
    fd              reduce using rule 8 (command -> lt value .)
    right           reduce using rule 8 (command -> lt value .)
    rt              reduce using rule 8 (command -> lt value .)
    left            reduce using rule 8 (command -> lt value .)
    lt              reduce using rule 8 (command -> lt value .)
    back            reduce using rule 8 (command -> lt value .)
    bk              reduce using rule 8 (command -> lt value .)
    setpos          reduce using rule 8 (command -> lt value .)
    setx            reduce using rule 8 (command -> lt value .)
    sety            reduce using rule 8 (command -> lt value .)
    home            reduce using rule 8 (command -> lt value .)
    pendown         reduce using rule 8 (command -> lt value .)
    pd              reduce using rule 8 (command -> lt value .)
    penup           reduce using rule 8 (command -> lt value .)
    pu              reduce using rule 8 (command -> lt value .)
    setpencolor     reduce using rule 8 (command -> lt value .)
    make            reduce using rule 8 (command -> lt value .)
    if              reduce using rule 8 (command -> lt value .)
    ifelse          reduce using rule 8 (command -> lt value .)
    repeat          reduce using rule 8 (command -> lt value .)
    while           reduce using rule 8 (command -> lt value .)
    $end            reduce using rule 8 (command -> lt value .)
    ]               reduce using rule 8 (command -> lt value .)


state 35

    (9) command -> back value .

    forward         reduce using rule 9 (command -> back value .)
    fd              reduce using rule 9 (command -> back value .)
    right           reduce using rule 9 (command -> back value .)
    rt              reduce using rule 9 (command -> back value .)
    left            reduce using rule 9 (command -> back value .)
    lt              reduce using rule 9 (command -> back value .)
    back            reduce using rule 9 (command -> back value .)
    bk              reduce using rule 9 (command -> back value .)
    setpos          reduce using rule 9 (command -> back value .)
    setx            reduce using rule 9 (command -> back value .)
    sety            reduce using rule 9 (command -> back value .)
    home            reduce using rule 9 (command -> back value .)
    pendown         reduce using rule 9 (command -> back value .)
    pd              reduce using rule 9 (command -> back value .)
    penup           reduce using rule 9 (command -> back value .)
    pu              reduce using rule 9 (command -> back value .)
    setpencolor     reduce using rule 9 (command -> back value .)
    make            reduce using rule 9 (command -> back value .)
    if              reduce using rule 9 (command -> back value .)
    ifelse          reduce using rule 9 (command -> back value .)
    repeat          reduce using rule 9 (command -> back value .)
    while           reduce using rule 9 (command -> back value .)
    $end            reduce using rule 9 (command -> back value .)
    ]               reduce using rule 9 (command -> back value .)


state 36

    (10) command -> bk value .

    forward         reduce using rule 10 (command -> bk value .)
    fd              reduce using rule 10 (command -> bk value .)
    right           reduce using rule 10 (command -> bk value .)
    rt              reduce using rule 10 (command -> bk value .)
    left            reduce using rule 10 (command -> bk value .)
    lt              reduce using rule 10 (command -> bk value .)
    back            reduce using rule 10 (command -> bk value .)
    bk              reduce using rule 10 (command -> bk value .)
    setpos          reduce using rule 10 (command -> bk value .)
    setx            reduce using rule 10 (command -> bk value .)
    sety            reduce using rule 10 (command -> bk value .)
    home            reduce using rule 10 (command -> bk value .)
    pendown         reduce using rule 10 (command -> bk value .)
    pd              reduce using rule 10 (command -> bk value .)
    penup           reduce using rule 10 (command -> bk value .)
    pu              reduce using rule 10 (command -> bk value .)
    setpencolor     reduce using rule 10 (command -> bk value .)
    make            reduce using rule 10 (command -> bk value .)
    if              reduce using rule 10 (command -> bk value .)
    ifelse          reduce using rule 10 (command -> bk value .)
    repeat          reduce using rule 10 (command -> bk value .)
    while           reduce using rule 10 (command -> bk value .)
    $end            reduce using rule 10 (command -> bk value .)
    ]               reduce using rule 10 (command -> bk value .)


state 37

    (11) command -> setpos [ . value value ]
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 48

state 38

    (12) command -> setpos value . value
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 49

state 39

    (13) command -> setx value .

    forward         reduce using rule 13 (command -> setx value .)
    fd              reduce using rule 13 (command -> setx value .)
    right           reduce using rule 13 (command -> setx value .)
    rt              reduce using rule 13 (command -> setx value .)
    left            reduce using rule 13 (command -> setx value .)
    lt              reduce using rule 13 (command -> setx value .)
    back            reduce using rule 13 (command -> setx value .)
    bk              reduce using rule 13 (command -> setx value .)
    setpos          reduce using rule 13 (command -> setx value .)
    setx            reduce using rule 13 (command -> setx value .)
    sety            reduce using rule 13 (command -> setx value .)
    home            reduce using rule 13 (command -> setx value .)
    pendown         reduce using rule 13 (command -> setx value .)
    pd              reduce using rule 13 (command -> setx value .)
    penup           reduce using rule 13 (command -> setx value .)
    pu              reduce using rule 13 (command -> setx value .)
    setpencolor     reduce using rule 13 (command -> setx value .)
    make            reduce using rule 13 (command -> setx value .)
    if              reduce using rule 13 (command -> setx value .)
    ifelse          reduce using rule 13 (command -> setx value .)
    repeat          reduce using rule 13 (command -> setx value .)
    while           reduce using rule 13 (command -> setx value .)
    $end            reduce using rule 13 (command -> setx value .)
    ]               reduce using rule 13 (command -> setx value .)


state 40

    (14) command -> sety value .

    forward         reduce using rule 14 (command -> sety value .)
    fd              reduce using rule 14 (command -> sety value .)
    right           reduce using rule 14 (command -> sety value .)
    rt              reduce using rule 14 (command -> sety value .)
    left            reduce using rule 14 (command -> sety value .)
    lt              reduce using rule 14 (command -> sety value .)
    back            reduce using rule 14 (command -> sety value .)
    bk              reduce using rule 14 (command -> sety value .)
    setpos          reduce using rule 14 (command -> sety value .)
    setx            reduce using rule 14 (command -> sety value .)
    sety            reduce using rule 14 (command -> sety value .)
    home            reduce using rule 14 (command -> sety value .)
    pendown         reduce using rule 14 (command -> sety value .)
    pd              reduce using rule 14 (command -> sety value .)
    penup           reduce using rule 14 (command -> sety value .)
    pu              reduce using rule 14 (command -> sety value .)
    setpencolor     reduce using rule 14 (command -> sety value .)
    make            reduce using rule 14 (command -> sety value .)
    if              reduce using rule 14 (command -> sety value .)
    ifelse          reduce using rule 14 (command -> sety value .)
    repeat          reduce using rule 14 (command -> sety value .)
    while           reduce using rule 14 (command -> sety value .)
    $end            reduce using rule 14 (command -> sety value .)
    ]               reduce using rule 14 (command -> sety value .)


state 41

    (20) command -> setpencolor [ . color ]
    (21) color -> . value value value
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    color                          shift and go to state 50
    value                          shift and go to state 51

state 42

    (24) command -> make VAR . value
    (25) command -> make VAR . expression
    (22) value -> . NUMBER
    (23) value -> . VAR
    (26) expression -> . value OPERATION value
    (27) expression -> . value

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 52
    expression                     shift and go to state 53

state 43

    (28) command -> if value . SIGN value [ program ]

    SIGN            shift and go to state 54


state 44

    (29) command -> ifelse value . SIGN value [ program ]

    SIGN            shift and go to state 55


state 45

    (30) command -> repeat value . [ program ]

    [               shift and go to state 56


state 46

    (31) command -> while [ . value SIGN value ] [ program ]
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 57

state 47

    (26) expression -> value OPERATION . value
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 58

state 48

    (11) command -> setpos [ value . value ]
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 59

state 49

    (12) command -> setpos value value .

    forward         reduce using rule 12 (command -> setpos value value .)
    fd              reduce using rule 12 (command -> setpos value value .)
    right           reduce using rule 12 (command -> setpos value value .)
    rt              reduce using rule 12 (command -> setpos value value .)
    left            reduce using rule 12 (command -> setpos value value .)
    lt              reduce using rule 12 (command -> setpos value value .)
    back            reduce using rule 12 (command -> setpos value value .)
    bk              reduce using rule 12 (command -> setpos value value .)
    setpos          reduce using rule 12 (command -> setpos value value .)
    setx            reduce using rule 12 (command -> setpos value value .)
    sety            reduce using rule 12 (command -> setpos value value .)
    home            reduce using rule 12 (command -> setpos value value .)
    pendown         reduce using rule 12 (command -> setpos value value .)
    pd              reduce using rule 12 (command -> setpos value value .)
    penup           reduce using rule 12 (command -> setpos value value .)
    pu              reduce using rule 12 (command -> setpos value value .)
    setpencolor     reduce using rule 12 (command -> setpos value value .)
    make            reduce using rule 12 (command -> setpos value value .)
    if              reduce using rule 12 (command -> setpos value value .)
    ifelse          reduce using rule 12 (command -> setpos value value .)
    repeat          reduce using rule 12 (command -> setpos value value .)
    while           reduce using rule 12 (command -> setpos value value .)
    $end            reduce using rule 12 (command -> setpos value value .)
    ]               reduce using rule 12 (command -> setpos value value .)


state 50

    (20) command -> setpencolor [ color . ]

    ]               shift and go to state 60


state 51

    (21) color -> value . value value
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 61

state 52

    (24) command -> make VAR value .
    (26) expression -> value . OPERATION value
    (27) expression -> value .

  ! reduce/reduce conflict for forward resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for fd resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for right resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for rt resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for left resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for lt resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for back resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for bk resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for setpos resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for setx resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for sety resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for home resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for pendown resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for pd resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for penup resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for pu resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for setpencolor resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for make resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for if resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for ifelse resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for repeat resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for while resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for $end resolved using rule 24 (command -> make VAR value .)
  ! reduce/reduce conflict for ] resolved using rule 24 (command -> make VAR value .)
    forward         reduce using rule 24 (command -> make VAR value .)
    fd              reduce using rule 24 (command -> make VAR value .)
    right           reduce using rule 24 (command -> make VAR value .)
    rt              reduce using rule 24 (command -> make VAR value .)
    left            reduce using rule 24 (command -> make VAR value .)
    lt              reduce using rule 24 (command -> make VAR value .)
    back            reduce using rule 24 (command -> make VAR value .)
    bk              reduce using rule 24 (command -> make VAR value .)
    setpos          reduce using rule 24 (command -> make VAR value .)
    setx            reduce using rule 24 (command -> make VAR value .)
    sety            reduce using rule 24 (command -> make VAR value .)
    home            reduce using rule 24 (command -> make VAR value .)
    pendown         reduce using rule 24 (command -> make VAR value .)
    pd              reduce using rule 24 (command -> make VAR value .)
    penup           reduce using rule 24 (command -> make VAR value .)
    pu              reduce using rule 24 (command -> make VAR value .)
    setpencolor     reduce using rule 24 (command -> make VAR value .)
    make            reduce using rule 24 (command -> make VAR value .)
    if              reduce using rule 24 (command -> make VAR value .)
    ifelse          reduce using rule 24 (command -> make VAR value .)
    repeat          reduce using rule 24 (command -> make VAR value .)
    while           reduce using rule 24 (command -> make VAR value .)
    $end            reduce using rule 24 (command -> make VAR value .)
    ]               reduce using rule 24 (command -> make VAR value .)
    OPERATION       shift and go to state 47

  ! forward         [ reduce using rule 27 (expression -> value .) ]
  ! fd              [ reduce using rule 27 (expression -> value .) ]
  ! right           [ reduce using rule 27 (expression -> value .) ]
  ! rt              [ reduce using rule 27 (expression -> value .) ]
  ! left            [ reduce using rule 27 (expression -> value .) ]
  ! lt              [ reduce using rule 27 (expression -> value .) ]
  ! back            [ reduce using rule 27 (expression -> value .) ]
  ! bk              [ reduce using rule 27 (expression -> value .) ]
  ! setpos          [ reduce using rule 27 (expression -> value .) ]
  ! setx            [ reduce using rule 27 (expression -> value .) ]
  ! sety            [ reduce using rule 27 (expression -> value .) ]
  ! home            [ reduce using rule 27 (expression -> value .) ]
  ! pendown         [ reduce using rule 27 (expression -> value .) ]
  ! pd              [ reduce using rule 27 (expression -> value .) ]
  ! penup           [ reduce using rule 27 (expression -> value .) ]
  ! pu              [ reduce using rule 27 (expression -> value .) ]
  ! setpencolor     [ reduce using rule 27 (expression -> value .) ]
  ! make            [ reduce using rule 27 (expression -> value .) ]
  ! if              [ reduce using rule 27 (expression -> value .) ]
  ! ifelse          [ reduce using rule 27 (expression -> value .) ]
  ! repeat          [ reduce using rule 27 (expression -> value .) ]
  ! while           [ reduce using rule 27 (expression -> value .) ]
  ! $end            [ reduce using rule 27 (expression -> value .) ]
  ! ]               [ reduce using rule 27 (expression -> value .) ]


state 53

    (25) command -> make VAR expression .

    forward         reduce using rule 25 (command -> make VAR expression .)
    fd              reduce using rule 25 (command -> make VAR expression .)
    right           reduce using rule 25 (command -> make VAR expression .)
    rt              reduce using rule 25 (command -> make VAR expression .)
    left            reduce using rule 25 (command -> make VAR expression .)
    lt              reduce using rule 25 (command -> make VAR expression .)
    back            reduce using rule 25 (command -> make VAR expression .)
    bk              reduce using rule 25 (command -> make VAR expression .)
    setpos          reduce using rule 25 (command -> make VAR expression .)
    setx            reduce using rule 25 (command -> make VAR expression .)
    sety            reduce using rule 25 (command -> make VAR expression .)
    home            reduce using rule 25 (command -> make VAR expression .)
    pendown         reduce using rule 25 (command -> make VAR expression .)
    pd              reduce using rule 25 (command -> make VAR expression .)
    penup           reduce using rule 25 (command -> make VAR expression .)
    pu              reduce using rule 25 (command -> make VAR expression .)
    setpencolor     reduce using rule 25 (command -> make VAR expression .)
    make            reduce using rule 25 (command -> make VAR expression .)
    if              reduce using rule 25 (command -> make VAR expression .)
    ifelse          reduce using rule 25 (command -> make VAR expression .)
    repeat          reduce using rule 25 (command -> make VAR expression .)
    while           reduce using rule 25 (command -> make VAR expression .)
    $end            reduce using rule 25 (command -> make VAR expression .)
    ]               reduce using rule 25 (command -> make VAR expression .)


state 54

    (28) command -> if value SIGN . value [ program ]
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 62

state 55

    (29) command -> ifelse value SIGN . value [ program ]
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 63

state 56

    (30) command -> repeat value [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . forward expression
    (4) command -> . fd expression
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (24) command -> . make VAR value
    (25) command -> . make VAR expression
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ]
    (30) command -> . repeat value [ program ]
    (31) command -> . while [ value SIGN value ] [ program ]

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24

    program                        shift and go to state 64
    command                        shift and go to state 2

state 57

    (31) command -> while [ value . SIGN value ] [ program ]

    SIGN            shift and go to state 65


state 58

    (26) expression -> value OPERATION value .

    forward         reduce using rule 26 (expression -> value OPERATION value .)
    fd              reduce using rule 26 (expression -> value OPERATION value .)
    right           reduce using rule 26 (expression -> value OPERATION value .)
    rt              reduce using rule 26 (expression -> value OPERATION value .)
    left            reduce using rule 26 (expression -> value OPERATION value .)
    lt              reduce using rule 26 (expression -> value OPERATION value .)
    back            reduce using rule 26 (expression -> value OPERATION value .)
    bk              reduce using rule 26 (expression -> value OPERATION value .)
    setpos          reduce using rule 26 (expression -> value OPERATION value .)
    setx            reduce using rule 26 (expression -> value OPERATION value .)
    sety            reduce using rule 26 (expression -> value OPERATION value .)
    home            reduce using rule 26 (expression -> value OPERATION value .)
    pendown         reduce using rule 26 (expression -> value OPERATION value .)
    pd              reduce using rule 26 (expression -> value OPERATION value .)
    penup           reduce using rule 26 (expression -> value OPERATION value .)
    pu              reduce using rule 26 (expression -> value OPERATION value .)
    setpencolor     reduce using rule 26 (expression -> value OPERATION value .)
    make            reduce using rule 26 (expression -> value OPERATION value .)
    if              reduce using rule 26 (expression -> value OPERATION value .)
    ifelse          reduce using rule 26 (expression -> value OPERATION value .)
    repeat          reduce using rule 26 (expression -> value OPERATION value .)
    while           reduce using rule 26 (expression -> value OPERATION value .)
    $end            reduce using rule 26 (expression -> value OPERATION value .)
    ]               reduce using rule 26 (expression -> value OPERATION value .)


state 59

    (11) command -> setpos [ value value . ]

    ]               shift and go to state 66


state 60

    (20) command -> setpencolor [ color ] .

    forward         reduce using rule 20 (command -> setpencolor [ color ] .)
    fd              reduce using rule 20 (command -> setpencolor [ color ] .)
    right           reduce using rule 20 (command -> setpencolor [ color ] .)
    rt              reduce using rule 20 (command -> setpencolor [ color ] .)
    left            reduce using rule 20 (command -> setpencolor [ color ] .)
    lt              reduce using rule 20 (command -> setpencolor [ color ] .)
    back            reduce using rule 20 (command -> setpencolor [ color ] .)
    bk              reduce using rule 20 (command -> setpencolor [ color ] .)
    setpos          reduce using rule 20 (command -> setpencolor [ color ] .)
    setx            reduce using rule 20 (command -> setpencolor [ color ] .)
    sety            reduce using rule 20 (command -> setpencolor [ color ] .)
    home            reduce using rule 20 (command -> setpencolor [ color ] .)
    pendown         reduce using rule 20 (command -> setpencolor [ color ] .)
    pd              reduce using rule 20 (command -> setpencolor [ color ] .)
    penup           reduce using rule 20 (command -> setpencolor [ color ] .)
    pu              reduce using rule 20 (command -> setpencolor [ color ] .)
    setpencolor     reduce using rule 20 (command -> setpencolor [ color ] .)
    make            reduce using rule 20 (command -> setpencolor [ color ] .)
    if              reduce using rule 20 (command -> setpencolor [ color ] .)
    ifelse          reduce using rule 20 (command -> setpencolor [ color ] .)
    repeat          reduce using rule 20 (command -> setpencolor [ color ] .)
    while           reduce using rule 20 (command -> setpencolor [ color ] .)
    $end            reduce using rule 20 (command -> setpencolor [ color ] .)
    ]               reduce using rule 20 (command -> setpencolor [ color ] .)


state 61

    (21) color -> value value . value
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 67

state 62

    (28) command -> if value SIGN value . [ program ]

    [               shift and go to state 68


state 63

    (29) command -> ifelse value SIGN value . [ program ]

    [               shift and go to state 69


state 64

    (30) command -> repeat value [ program . ]
    (2) program -> program . command
    (3) command -> . forward expression
    (4) command -> . fd expression
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (24) command -> . make VAR value
    (25) command -> . make VAR expression
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ]
    (30) command -> . repeat value [ program ]
    (31) command -> . while [ value SIGN value ] [ program ]

    ]               shift and go to state 70
    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24

    command                        shift and go to state 25

state 65

    (31) command -> while [ value SIGN . value ] [ program ]
    (22) value -> . NUMBER
    (23) value -> . VAR

    NUMBER          shift and go to state 28
    VAR             shift and go to state 29

    value                          shift and go to state 71

state 66

    (11) command -> setpos [ value value ] .

    forward         reduce using rule 11 (command -> setpos [ value value ] .)
    fd              reduce using rule 11 (command -> setpos [ value value ] .)
    right           reduce using rule 11 (command -> setpos [ value value ] .)
    rt              reduce using rule 11 (command -> setpos [ value value ] .)
    left            reduce using rule 11 (command -> setpos [ value value ] .)
    lt              reduce using rule 11 (command -> setpos [ value value ] .)
    back            reduce using rule 11 (command -> setpos [ value value ] .)
    bk              reduce using rule 11 (command -> setpos [ value value ] .)
    setpos          reduce using rule 11 (command -> setpos [ value value ] .)
    setx            reduce using rule 11 (command -> setpos [ value value ] .)
    sety            reduce using rule 11 (command -> setpos [ value value ] .)
    home            reduce using rule 11 (command -> setpos [ value value ] .)
    pendown         reduce using rule 11 (command -> setpos [ value value ] .)
    pd              reduce using rule 11 (command -> setpos [ value value ] .)
    penup           reduce using rule 11 (command -> setpos [ value value ] .)
    pu              reduce using rule 11 (command -> setpos [ value value ] .)
    setpencolor     reduce using rule 11 (command -> setpos [ value value ] .)
    make            reduce using rule 11 (command -> setpos [ value value ] .)
    if              reduce using rule 11 (command -> setpos [ value value ] .)
    ifelse          reduce using rule 11 (command -> setpos [ value value ] .)
    repeat          reduce using rule 11 (command -> setpos [ value value ] .)
    while           reduce using rule 11 (command -> setpos [ value value ] .)
    $end            reduce using rule 11 (command -> setpos [ value value ] .)
    ]               reduce using rule 11 (command -> setpos [ value value ] .)


state 67

    (21) color -> value value value .

    ]               reduce using rule 21 (color -> value value value .)


state 68

    (28) command -> if value SIGN value [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . forward expression
    (4) command -> . fd expression
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (24) command -> . make VAR value
    (25) command -> . make VAR expression
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ]
    (30) command -> . repeat value [ program ]
    (31) command -> . while [ value SIGN value ] [ program ]

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24

    program                        shift and go to state 72
    command                        shift and go to state 2

state 69

    (29) command -> ifelse value SIGN value [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . forward expression
    (4) command -> . fd expression
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (24) command -> . make VAR value
    (25) command -> . make VAR expression
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ]
    (30) command -> . repeat value [ program ]
    (31) command -> . while [ value SIGN value ] [ program ]

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24

    program                        shift and go to state 73
    command                        shift and go to state 2

state 70

    (30) command -> repeat value [ program ] .

    forward         reduce using rule 30 (command -> repeat value [ program ] .)
    fd              reduce using rule 30 (command -> repeat value [ program ] .)
    right           reduce using rule 30 (command -> repeat value [ program ] .)
    rt              reduce using rule 30 (command -> repeat value [ program ] .)
    left            reduce using rule 30 (command -> repeat value [ program ] .)
    lt              reduce using rule 30 (command -> repeat value [ program ] .)
    back            reduce using rule 30 (command -> repeat value [ program ] .)
    bk              reduce using rule 30 (command -> repeat value [ program ] .)
    setpos          reduce using rule 30 (command -> repeat value [ program ] .)
    setx            reduce using rule 30 (command -> repeat value [ program ] .)
    sety            reduce using rule 30 (command -> repeat value [ program ] .)
    home            reduce using rule 30 (command -> repeat value [ program ] .)
    pendown         reduce using rule 30 (command -> repeat value [ program ] .)
    pd              reduce using rule 30 (command -> repeat value [ program ] .)
    penup           reduce using rule 30 (command -> repeat value [ program ] .)
    pu              reduce using rule 30 (command -> repeat value [ program ] .)
    setpencolor     reduce using rule 30 (command -> repeat value [ program ] .)
    make            reduce using rule 30 (command -> repeat value [ program ] .)
    if              reduce using rule 30 (command -> repeat value [ program ] .)
    ifelse          reduce using rule 30 (command -> repeat value [ program ] .)
    repeat          reduce using rule 30 (command -> repeat value [ program ] .)
    while           reduce using rule 30 (command -> repeat value [ program ] .)
    $end            reduce using rule 30 (command -> repeat value [ program ] .)
    ]               reduce using rule 30 (command -> repeat value [ program ] .)


state 71

    (31) command -> while [ value SIGN value . ] [ program ]

    ]               shift and go to state 74


state 72

    (28) command -> if value SIGN value [ program . ]
    (2) program -> program . command
    (3) command -> . forward expression
    (4) command -> . fd expression
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (24) command -> . make VAR value
    (25) command -> . make VAR expression
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ]
    (30) command -> . repeat value [ program ]
    (31) command -> . while [ value SIGN value ] [ program ]

    ]               shift and go to state 75
    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24

    command                        shift and go to state 25

state 73

    (29) command -> ifelse value SIGN value [ program . ]
    (2) program -> program . command
    (3) command -> . forward expression
    (4) command -> . fd expression
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (24) command -> . make VAR value
    (25) command -> . make VAR expression
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ]
    (30) command -> . repeat value [ program ]
    (31) command -> . while [ value SIGN value ] [ program ]

    ]               shift and go to state 76
    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24

    command                        shift and go to state 25

state 74

    (31) command -> while [ value SIGN value ] . [ program ]

    [               shift and go to state 77


state 75

    (28) command -> if value SIGN value [ program ] .

    forward         reduce using rule 28 (command -> if value SIGN value [ program ] .)
    fd              reduce using rule 28 (command -> if value SIGN value [ program ] .)
    right           reduce using rule 28 (command -> if value SIGN value [ program ] .)
    rt              reduce using rule 28 (command -> if value SIGN value [ program ] .)
    left            reduce using rule 28 (command -> if value SIGN value [ program ] .)
    lt              reduce using rule 28 (command -> if value SIGN value [ program ] .)
    back            reduce using rule 28 (command -> if value SIGN value [ program ] .)
    bk              reduce using rule 28 (command -> if value SIGN value [ program ] .)
    setpos          reduce using rule 28 (command -> if value SIGN value [ program ] .)
    setx            reduce using rule 28 (command -> if value SIGN value [ program ] .)
    sety            reduce using rule 28 (command -> if value SIGN value [ program ] .)
    home            reduce using rule 28 (command -> if value SIGN value [ program ] .)
    pendown         reduce using rule 28 (command -> if value SIGN value [ program ] .)
    pd              reduce using rule 28 (command -> if value SIGN value [ program ] .)
    penup           reduce using rule 28 (command -> if value SIGN value [ program ] .)
    pu              reduce using rule 28 (command -> if value SIGN value [ program ] .)
    setpencolor     reduce using rule 28 (command -> if value SIGN value [ program ] .)
    make            reduce using rule 28 (command -> if value SIGN value [ program ] .)
    if              reduce using rule 28 (command -> if value SIGN value [ program ] .)
    ifelse          reduce using rule 28 (command -> if value SIGN value [ program ] .)
    repeat          reduce using rule 28 (command -> if value SIGN value [ program ] .)
    while           reduce using rule 28 (command -> if value SIGN value [ program ] .)
    $end            reduce using rule 28 (command -> if value SIGN value [ program ] .)
    ]               reduce using rule 28 (command -> if value SIGN value [ program ] .)


state 76

    (29) command -> ifelse value SIGN value [ program ] .

    forward         reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    fd              reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    right           reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    rt              reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    left            reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    lt              reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    back            reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    bk              reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    setpos          reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    setx            reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    sety            reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    home            reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    pendown         reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    pd              reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    penup           reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    pu              reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    setpencolor     reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    make            reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    if              reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    ifelse          reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    repeat          reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    while           reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    $end            reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)
    ]               reduce using rule 29 (command -> ifelse value SIGN value [ program ] .)


state 77

    (31) command -> while [ value SIGN value ] [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . forward expression
    (4) command -> . fd expression
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (24) command -> . make VAR value
    (25) command -> . make VAR expression
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ]
    (30) command -> . repeat value [ program ]
    (31) command -> . while [ value SIGN value ] [ program ]

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24

    program                        shift and go to state 78
    command                        shift and go to state 2

state 78

    (31) command -> while [ value SIGN value ] [ program . ]
    (2) program -> program . command
    (3) command -> . forward expression
    (4) command -> . fd expression
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (24) command -> . make VAR value
    (25) command -> . make VAR expression
    (28) command -> . if value SIGN value [ program ]
    (29) command -> . ifelse value SIGN value [ program ]
    (30) command -> . repeat value [ program ]
    (31) command -> . while [ value SIGN value ] [ program ]

    ]               shift and go to state 79
    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24

    command                        shift and go to state 25

state 79

    (31) command -> while [ value SIGN value ] [ program ] .

    forward         reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    fd              reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    right           reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    rt              reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    left            reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    lt              reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    back            reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    bk              reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    setpos          reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    setx            reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    sety            reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    home            reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    pendown         reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    pd              reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    penup           reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    pu              reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    setpencolor     reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    make            reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    if              reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    ifelse          reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    repeat          reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    while           reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    $end            reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)
    ]               reduce using rule 31 (command -> while [ value SIGN value ] [ program ] .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 52 resolved using rule (command -> make VAR value)
WARNING: rejected rule (expression -> value) in state 52
