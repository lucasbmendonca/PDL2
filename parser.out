Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    setxy

Grammar

Rule 0     S' -> program
Rule 1     program -> command
Rule 2     program -> program command
Rule 3     command -> forward value
Rule 4     command -> fd value
Rule 5     command -> right value
Rule 6     command -> rt value
Rule 7     command -> left value
Rule 8     command -> lt value
Rule 9     command -> back value
Rule 10    command -> bk value
Rule 11    command -> setpos [ value value ]
Rule 12    command -> setpos value value
Rule 13    command -> setx value
Rule 14    command -> sety value
Rule 15    command -> home
Rule 16    command -> pendown
Rule 17    command -> pd
Rule 18    command -> penup
Rule 19    command -> pu
Rule 20    command -> setpencolor [ color ]
Rule 21    color -> value value value
Rule 22    value -> NUMBER
Rule 23    value -> VAR
Rule 24    value -> value + value
Rule 25    value -> value - value
Rule 26    value -> value * value
Rule 27    value -> value / value
Rule 28    command -> make VAR value
Rule 29    command -> if value SIGN value [ program ]
Rule 30    command -> ifelse value SIGN value [ program ]
Rule 31    command -> repeat value [ program ]
Rule 32    command -> while [ value SIGN value ] [ program ]
Rule 33    command -> to STR varlist program end
Rule 34    varlist -> <empty>
Rule 35    varlist -> VAR
Rule 36    varlist -> varlist VAR
Rule 37    command -> STR valuelist
Rule 38    valuelist -> <empty>
Rule 39    valuelist -> value
Rule 40    valuelist -> valuelist value
Rule 41    command -> stop

Terminals, with rules where they appear

*                    : 26
+                    : 24
-                    : 25
/                    : 27
NUMBER               : 22
SIGN                 : 29 30 32
STR                  : 33 37
VAR                  : 23 28 35 36
[                    : 11 20 29 30 31 32 32
]                    : 11 20 29 30 31 32 32
back                 : 9
bk                   : 10
end                  : 33
error                : 
fd                   : 4
forward              : 3
home                 : 15
if                   : 29
ifelse               : 30
left                 : 7
lt                   : 8
make                 : 28
pd                   : 17
pendown              : 16
penup                : 18
pu                   : 19
repeat               : 31
right                : 5
rt                   : 6
setpencolor          : 20
setpos               : 11 12
setx                 : 13
setxy                : 
sety                 : 14
stop                 : 41
to                   : 33
while                : 32

Nonterminals, with rules where they appear

color                : 20
command              : 1 2
program              : 2 29 30 31 32 33 0
value                : 3 4 5 6 7 8 9 10 11 11 12 12 13 14 21 21 21 24 24 25 25 26 26 27 27 28 29 29 30 30 31 32 32 39 40
valuelist            : 37 40
varlist              : 33 36

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . forward value
    (4) command -> . fd value
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (28) command -> . make VAR value
    (29) command -> . if value SIGN value [ program ]
    (30) command -> . ifelse value SIGN value [ program ]
    (31) command -> . repeat value [ program ]
    (32) command -> . while [ value SIGN value ] [ program ]
    (33) command -> . to STR varlist program end
    (37) command -> . STR valuelist
    (41) command -> . stop

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24
    to              shift and go to state 25
    STR             shift and go to state 26
    stop            shift and go to state 27

    program                        shift and go to state 1
    command                        shift and go to state 2

state 1

    (0) S' -> program .
    (2) program -> program . command
    (3) command -> . forward value
    (4) command -> . fd value
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (28) command -> . make VAR value
    (29) command -> . if value SIGN value [ program ]
    (30) command -> . ifelse value SIGN value [ program ]
    (31) command -> . repeat value [ program ]
    (32) command -> . while [ value SIGN value ] [ program ]
    (33) command -> . to STR varlist program end
    (37) command -> . STR valuelist
    (41) command -> . stop

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24
    to              shift and go to state 25
    STR             shift and go to state 26
    stop            shift and go to state 27

    command                        shift and go to state 28

state 2

    (1) program -> command .

    forward         reduce using rule 1 (program -> command .)
    fd              reduce using rule 1 (program -> command .)
    right           reduce using rule 1 (program -> command .)
    rt              reduce using rule 1 (program -> command .)
    left            reduce using rule 1 (program -> command .)
    lt              reduce using rule 1 (program -> command .)
    back            reduce using rule 1 (program -> command .)
    bk              reduce using rule 1 (program -> command .)
    setpos          reduce using rule 1 (program -> command .)
    setx            reduce using rule 1 (program -> command .)
    sety            reduce using rule 1 (program -> command .)
    home            reduce using rule 1 (program -> command .)
    pendown         reduce using rule 1 (program -> command .)
    pd              reduce using rule 1 (program -> command .)
    penup           reduce using rule 1 (program -> command .)
    pu              reduce using rule 1 (program -> command .)
    setpencolor     reduce using rule 1 (program -> command .)
    make            reduce using rule 1 (program -> command .)
    if              reduce using rule 1 (program -> command .)
    ifelse          reduce using rule 1 (program -> command .)
    repeat          reduce using rule 1 (program -> command .)
    while           reduce using rule 1 (program -> command .)
    to              reduce using rule 1 (program -> command .)
    STR             reduce using rule 1 (program -> command .)
    stop            reduce using rule 1 (program -> command .)
    $end            reduce using rule 1 (program -> command .)
    ]               reduce using rule 1 (program -> command .)
    end             reduce using rule 1 (program -> command .)


state 3

    (3) command -> forward . value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 29

state 4

    (4) command -> fd . value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 32

state 5

    (5) command -> right . value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 33

state 6

    (6) command -> rt . value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 34

state 7

    (7) command -> left . value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 35

state 8

    (8) command -> lt . value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 36

state 9

    (9) command -> back . value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 37

state 10

    (10) command -> bk . value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 38

state 11

    (11) command -> setpos . [ value value ]
    (12) command -> setpos . value value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    [               shift and go to state 39
    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 40

state 12

    (13) command -> setx . value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 41

state 13

    (14) command -> sety . value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 42

state 14

    (15) command -> home .

    forward         reduce using rule 15 (command -> home .)
    fd              reduce using rule 15 (command -> home .)
    right           reduce using rule 15 (command -> home .)
    rt              reduce using rule 15 (command -> home .)
    left            reduce using rule 15 (command -> home .)
    lt              reduce using rule 15 (command -> home .)
    back            reduce using rule 15 (command -> home .)
    bk              reduce using rule 15 (command -> home .)
    setpos          reduce using rule 15 (command -> home .)
    setx            reduce using rule 15 (command -> home .)
    sety            reduce using rule 15 (command -> home .)
    home            reduce using rule 15 (command -> home .)
    pendown         reduce using rule 15 (command -> home .)
    pd              reduce using rule 15 (command -> home .)
    penup           reduce using rule 15 (command -> home .)
    pu              reduce using rule 15 (command -> home .)
    setpencolor     reduce using rule 15 (command -> home .)
    make            reduce using rule 15 (command -> home .)
    if              reduce using rule 15 (command -> home .)
    ifelse          reduce using rule 15 (command -> home .)
    repeat          reduce using rule 15 (command -> home .)
    while           reduce using rule 15 (command -> home .)
    to              reduce using rule 15 (command -> home .)
    STR             reduce using rule 15 (command -> home .)
    stop            reduce using rule 15 (command -> home .)
    $end            reduce using rule 15 (command -> home .)
    ]               reduce using rule 15 (command -> home .)
    end             reduce using rule 15 (command -> home .)


state 15

    (16) command -> pendown .

    forward         reduce using rule 16 (command -> pendown .)
    fd              reduce using rule 16 (command -> pendown .)
    right           reduce using rule 16 (command -> pendown .)
    rt              reduce using rule 16 (command -> pendown .)
    left            reduce using rule 16 (command -> pendown .)
    lt              reduce using rule 16 (command -> pendown .)
    back            reduce using rule 16 (command -> pendown .)
    bk              reduce using rule 16 (command -> pendown .)
    setpos          reduce using rule 16 (command -> pendown .)
    setx            reduce using rule 16 (command -> pendown .)
    sety            reduce using rule 16 (command -> pendown .)
    home            reduce using rule 16 (command -> pendown .)
    pendown         reduce using rule 16 (command -> pendown .)
    pd              reduce using rule 16 (command -> pendown .)
    penup           reduce using rule 16 (command -> pendown .)
    pu              reduce using rule 16 (command -> pendown .)
    setpencolor     reduce using rule 16 (command -> pendown .)
    make            reduce using rule 16 (command -> pendown .)
    if              reduce using rule 16 (command -> pendown .)
    ifelse          reduce using rule 16 (command -> pendown .)
    repeat          reduce using rule 16 (command -> pendown .)
    while           reduce using rule 16 (command -> pendown .)
    to              reduce using rule 16 (command -> pendown .)
    STR             reduce using rule 16 (command -> pendown .)
    stop            reduce using rule 16 (command -> pendown .)
    $end            reduce using rule 16 (command -> pendown .)
    ]               reduce using rule 16 (command -> pendown .)
    end             reduce using rule 16 (command -> pendown .)


state 16

    (17) command -> pd .

    forward         reduce using rule 17 (command -> pd .)
    fd              reduce using rule 17 (command -> pd .)
    right           reduce using rule 17 (command -> pd .)
    rt              reduce using rule 17 (command -> pd .)
    left            reduce using rule 17 (command -> pd .)
    lt              reduce using rule 17 (command -> pd .)
    back            reduce using rule 17 (command -> pd .)
    bk              reduce using rule 17 (command -> pd .)
    setpos          reduce using rule 17 (command -> pd .)
    setx            reduce using rule 17 (command -> pd .)
    sety            reduce using rule 17 (command -> pd .)
    home            reduce using rule 17 (command -> pd .)
    pendown         reduce using rule 17 (command -> pd .)
    pd              reduce using rule 17 (command -> pd .)
    penup           reduce using rule 17 (command -> pd .)
    pu              reduce using rule 17 (command -> pd .)
    setpencolor     reduce using rule 17 (command -> pd .)
    make            reduce using rule 17 (command -> pd .)
    if              reduce using rule 17 (command -> pd .)
    ifelse          reduce using rule 17 (command -> pd .)
    repeat          reduce using rule 17 (command -> pd .)
    while           reduce using rule 17 (command -> pd .)
    to              reduce using rule 17 (command -> pd .)
    STR             reduce using rule 17 (command -> pd .)
    stop            reduce using rule 17 (command -> pd .)
    $end            reduce using rule 17 (command -> pd .)
    ]               reduce using rule 17 (command -> pd .)
    end             reduce using rule 17 (command -> pd .)


state 17

    (18) command -> penup .

    forward         reduce using rule 18 (command -> penup .)
    fd              reduce using rule 18 (command -> penup .)
    right           reduce using rule 18 (command -> penup .)
    rt              reduce using rule 18 (command -> penup .)
    left            reduce using rule 18 (command -> penup .)
    lt              reduce using rule 18 (command -> penup .)
    back            reduce using rule 18 (command -> penup .)
    bk              reduce using rule 18 (command -> penup .)
    setpos          reduce using rule 18 (command -> penup .)
    setx            reduce using rule 18 (command -> penup .)
    sety            reduce using rule 18 (command -> penup .)
    home            reduce using rule 18 (command -> penup .)
    pendown         reduce using rule 18 (command -> penup .)
    pd              reduce using rule 18 (command -> penup .)
    penup           reduce using rule 18 (command -> penup .)
    pu              reduce using rule 18 (command -> penup .)
    setpencolor     reduce using rule 18 (command -> penup .)
    make            reduce using rule 18 (command -> penup .)
    if              reduce using rule 18 (command -> penup .)
    ifelse          reduce using rule 18 (command -> penup .)
    repeat          reduce using rule 18 (command -> penup .)
    while           reduce using rule 18 (command -> penup .)
    to              reduce using rule 18 (command -> penup .)
    STR             reduce using rule 18 (command -> penup .)
    stop            reduce using rule 18 (command -> penup .)
    $end            reduce using rule 18 (command -> penup .)
    ]               reduce using rule 18 (command -> penup .)
    end             reduce using rule 18 (command -> penup .)


state 18

    (19) command -> pu .

    forward         reduce using rule 19 (command -> pu .)
    fd              reduce using rule 19 (command -> pu .)
    right           reduce using rule 19 (command -> pu .)
    rt              reduce using rule 19 (command -> pu .)
    left            reduce using rule 19 (command -> pu .)
    lt              reduce using rule 19 (command -> pu .)
    back            reduce using rule 19 (command -> pu .)
    bk              reduce using rule 19 (command -> pu .)
    setpos          reduce using rule 19 (command -> pu .)
    setx            reduce using rule 19 (command -> pu .)
    sety            reduce using rule 19 (command -> pu .)
    home            reduce using rule 19 (command -> pu .)
    pendown         reduce using rule 19 (command -> pu .)
    pd              reduce using rule 19 (command -> pu .)
    penup           reduce using rule 19 (command -> pu .)
    pu              reduce using rule 19 (command -> pu .)
    setpencolor     reduce using rule 19 (command -> pu .)
    make            reduce using rule 19 (command -> pu .)
    if              reduce using rule 19 (command -> pu .)
    ifelse          reduce using rule 19 (command -> pu .)
    repeat          reduce using rule 19 (command -> pu .)
    while           reduce using rule 19 (command -> pu .)
    to              reduce using rule 19 (command -> pu .)
    STR             reduce using rule 19 (command -> pu .)
    stop            reduce using rule 19 (command -> pu .)
    $end            reduce using rule 19 (command -> pu .)
    ]               reduce using rule 19 (command -> pu .)
    end             reduce using rule 19 (command -> pu .)


state 19

    (20) command -> setpencolor . [ color ]

    [               shift and go to state 43


state 20

    (28) command -> make . VAR value

    VAR             shift and go to state 44


state 21

    (29) command -> if . value SIGN value [ program ]
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 45

state 22

    (30) command -> ifelse . value SIGN value [ program ]
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 46

state 23

    (31) command -> repeat . value [ program ]
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 47

state 24

    (32) command -> while . [ value SIGN value ] [ program ]

    [               shift and go to state 48


state 25

    (33) command -> to . STR varlist program end

    STR             shift and go to state 49


state 26

    (37) command -> STR . valuelist
    (38) valuelist -> .
    (39) valuelist -> . value
    (40) valuelist -> . valuelist value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    forward         reduce using rule 38 (valuelist -> .)
    fd              reduce using rule 38 (valuelist -> .)
    right           reduce using rule 38 (valuelist -> .)
    rt              reduce using rule 38 (valuelist -> .)
    left            reduce using rule 38 (valuelist -> .)
    lt              reduce using rule 38 (valuelist -> .)
    back            reduce using rule 38 (valuelist -> .)
    bk              reduce using rule 38 (valuelist -> .)
    setpos          reduce using rule 38 (valuelist -> .)
    setx            reduce using rule 38 (valuelist -> .)
    sety            reduce using rule 38 (valuelist -> .)
    home            reduce using rule 38 (valuelist -> .)
    pendown         reduce using rule 38 (valuelist -> .)
    pd              reduce using rule 38 (valuelist -> .)
    penup           reduce using rule 38 (valuelist -> .)
    pu              reduce using rule 38 (valuelist -> .)
    setpencolor     reduce using rule 38 (valuelist -> .)
    make            reduce using rule 38 (valuelist -> .)
    if              reduce using rule 38 (valuelist -> .)
    ifelse          reduce using rule 38 (valuelist -> .)
    repeat          reduce using rule 38 (valuelist -> .)
    while           reduce using rule 38 (valuelist -> .)
    to              reduce using rule 38 (valuelist -> .)
    STR             reduce using rule 38 (valuelist -> .)
    stop            reduce using rule 38 (valuelist -> .)
    $end            reduce using rule 38 (valuelist -> .)
    ]               reduce using rule 38 (valuelist -> .)
    end             reduce using rule 38 (valuelist -> .)
    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

  ! NUMBER          [ reduce using rule 38 (valuelist -> .) ]
  ! VAR             [ reduce using rule 38 (valuelist -> .) ]

    valuelist                      shift and go to state 50
    value                          shift and go to state 51

state 27

    (41) command -> stop .

    forward         reduce using rule 41 (command -> stop .)
    fd              reduce using rule 41 (command -> stop .)
    right           reduce using rule 41 (command -> stop .)
    rt              reduce using rule 41 (command -> stop .)
    left            reduce using rule 41 (command -> stop .)
    lt              reduce using rule 41 (command -> stop .)
    back            reduce using rule 41 (command -> stop .)
    bk              reduce using rule 41 (command -> stop .)
    setpos          reduce using rule 41 (command -> stop .)
    setx            reduce using rule 41 (command -> stop .)
    sety            reduce using rule 41 (command -> stop .)
    home            reduce using rule 41 (command -> stop .)
    pendown         reduce using rule 41 (command -> stop .)
    pd              reduce using rule 41 (command -> stop .)
    penup           reduce using rule 41 (command -> stop .)
    pu              reduce using rule 41 (command -> stop .)
    setpencolor     reduce using rule 41 (command -> stop .)
    make            reduce using rule 41 (command -> stop .)
    if              reduce using rule 41 (command -> stop .)
    ifelse          reduce using rule 41 (command -> stop .)
    repeat          reduce using rule 41 (command -> stop .)
    while           reduce using rule 41 (command -> stop .)
    to              reduce using rule 41 (command -> stop .)
    STR             reduce using rule 41 (command -> stop .)
    stop            reduce using rule 41 (command -> stop .)
    $end            reduce using rule 41 (command -> stop .)
    ]               reduce using rule 41 (command -> stop .)
    end             reduce using rule 41 (command -> stop .)


state 28

    (2) program -> program command .

    forward         reduce using rule 2 (program -> program command .)
    fd              reduce using rule 2 (program -> program command .)
    right           reduce using rule 2 (program -> program command .)
    rt              reduce using rule 2 (program -> program command .)
    left            reduce using rule 2 (program -> program command .)
    lt              reduce using rule 2 (program -> program command .)
    back            reduce using rule 2 (program -> program command .)
    bk              reduce using rule 2 (program -> program command .)
    setpos          reduce using rule 2 (program -> program command .)
    setx            reduce using rule 2 (program -> program command .)
    sety            reduce using rule 2 (program -> program command .)
    home            reduce using rule 2 (program -> program command .)
    pendown         reduce using rule 2 (program -> program command .)
    pd              reduce using rule 2 (program -> program command .)
    penup           reduce using rule 2 (program -> program command .)
    pu              reduce using rule 2 (program -> program command .)
    setpencolor     reduce using rule 2 (program -> program command .)
    make            reduce using rule 2 (program -> program command .)
    if              reduce using rule 2 (program -> program command .)
    ifelse          reduce using rule 2 (program -> program command .)
    repeat          reduce using rule 2 (program -> program command .)
    while           reduce using rule 2 (program -> program command .)
    to              reduce using rule 2 (program -> program command .)
    STR             reduce using rule 2 (program -> program command .)
    stop            reduce using rule 2 (program -> program command .)
    $end            reduce using rule 2 (program -> program command .)
    ]               reduce using rule 2 (program -> program command .)
    end             reduce using rule 2 (program -> program command .)


state 29

    (3) command -> forward value .
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    forward         reduce using rule 3 (command -> forward value .)
    fd              reduce using rule 3 (command -> forward value .)
    right           reduce using rule 3 (command -> forward value .)
    rt              reduce using rule 3 (command -> forward value .)
    left            reduce using rule 3 (command -> forward value .)
    lt              reduce using rule 3 (command -> forward value .)
    back            reduce using rule 3 (command -> forward value .)
    bk              reduce using rule 3 (command -> forward value .)
    setpos          reduce using rule 3 (command -> forward value .)
    setx            reduce using rule 3 (command -> forward value .)
    sety            reduce using rule 3 (command -> forward value .)
    home            reduce using rule 3 (command -> forward value .)
    pendown         reduce using rule 3 (command -> forward value .)
    pd              reduce using rule 3 (command -> forward value .)
    penup           reduce using rule 3 (command -> forward value .)
    pu              reduce using rule 3 (command -> forward value .)
    setpencolor     reduce using rule 3 (command -> forward value .)
    make            reduce using rule 3 (command -> forward value .)
    if              reduce using rule 3 (command -> forward value .)
    ifelse          reduce using rule 3 (command -> forward value .)
    repeat          reduce using rule 3 (command -> forward value .)
    while           reduce using rule 3 (command -> forward value .)
    to              reduce using rule 3 (command -> forward value .)
    STR             reduce using rule 3 (command -> forward value .)
    stop            reduce using rule 3 (command -> forward value .)
    $end            reduce using rule 3 (command -> forward value .)
    ]               reduce using rule 3 (command -> forward value .)
    end             reduce using rule 3 (command -> forward value .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 30

    (22) value -> NUMBER .

    +               reduce using rule 22 (value -> NUMBER .)
    -               reduce using rule 22 (value -> NUMBER .)
    *               reduce using rule 22 (value -> NUMBER .)
    /               reduce using rule 22 (value -> NUMBER .)
    forward         reduce using rule 22 (value -> NUMBER .)
    fd              reduce using rule 22 (value -> NUMBER .)
    right           reduce using rule 22 (value -> NUMBER .)
    rt              reduce using rule 22 (value -> NUMBER .)
    left            reduce using rule 22 (value -> NUMBER .)
    lt              reduce using rule 22 (value -> NUMBER .)
    back            reduce using rule 22 (value -> NUMBER .)
    bk              reduce using rule 22 (value -> NUMBER .)
    setpos          reduce using rule 22 (value -> NUMBER .)
    setx            reduce using rule 22 (value -> NUMBER .)
    sety            reduce using rule 22 (value -> NUMBER .)
    home            reduce using rule 22 (value -> NUMBER .)
    pendown         reduce using rule 22 (value -> NUMBER .)
    pd              reduce using rule 22 (value -> NUMBER .)
    penup           reduce using rule 22 (value -> NUMBER .)
    pu              reduce using rule 22 (value -> NUMBER .)
    setpencolor     reduce using rule 22 (value -> NUMBER .)
    make            reduce using rule 22 (value -> NUMBER .)
    if              reduce using rule 22 (value -> NUMBER .)
    ifelse          reduce using rule 22 (value -> NUMBER .)
    repeat          reduce using rule 22 (value -> NUMBER .)
    while           reduce using rule 22 (value -> NUMBER .)
    to              reduce using rule 22 (value -> NUMBER .)
    STR             reduce using rule 22 (value -> NUMBER .)
    stop            reduce using rule 22 (value -> NUMBER .)
    $end            reduce using rule 22 (value -> NUMBER .)
    ]               reduce using rule 22 (value -> NUMBER .)
    end             reduce using rule 22 (value -> NUMBER .)
    NUMBER          reduce using rule 22 (value -> NUMBER .)
    VAR             reduce using rule 22 (value -> NUMBER .)
    SIGN            reduce using rule 22 (value -> NUMBER .)
    [               reduce using rule 22 (value -> NUMBER .)


state 31

    (23) value -> VAR .

    +               reduce using rule 23 (value -> VAR .)
    -               reduce using rule 23 (value -> VAR .)
    *               reduce using rule 23 (value -> VAR .)
    /               reduce using rule 23 (value -> VAR .)
    forward         reduce using rule 23 (value -> VAR .)
    fd              reduce using rule 23 (value -> VAR .)
    right           reduce using rule 23 (value -> VAR .)
    rt              reduce using rule 23 (value -> VAR .)
    left            reduce using rule 23 (value -> VAR .)
    lt              reduce using rule 23 (value -> VAR .)
    back            reduce using rule 23 (value -> VAR .)
    bk              reduce using rule 23 (value -> VAR .)
    setpos          reduce using rule 23 (value -> VAR .)
    setx            reduce using rule 23 (value -> VAR .)
    sety            reduce using rule 23 (value -> VAR .)
    home            reduce using rule 23 (value -> VAR .)
    pendown         reduce using rule 23 (value -> VAR .)
    pd              reduce using rule 23 (value -> VAR .)
    penup           reduce using rule 23 (value -> VAR .)
    pu              reduce using rule 23 (value -> VAR .)
    setpencolor     reduce using rule 23 (value -> VAR .)
    make            reduce using rule 23 (value -> VAR .)
    if              reduce using rule 23 (value -> VAR .)
    ifelse          reduce using rule 23 (value -> VAR .)
    repeat          reduce using rule 23 (value -> VAR .)
    while           reduce using rule 23 (value -> VAR .)
    to              reduce using rule 23 (value -> VAR .)
    STR             reduce using rule 23 (value -> VAR .)
    stop            reduce using rule 23 (value -> VAR .)
    $end            reduce using rule 23 (value -> VAR .)
    ]               reduce using rule 23 (value -> VAR .)
    end             reduce using rule 23 (value -> VAR .)
    NUMBER          reduce using rule 23 (value -> VAR .)
    VAR             reduce using rule 23 (value -> VAR .)
    SIGN            reduce using rule 23 (value -> VAR .)
    [               reduce using rule 23 (value -> VAR .)


state 32

    (4) command -> fd value .
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    forward         reduce using rule 4 (command -> fd value .)
    fd              reduce using rule 4 (command -> fd value .)
    right           reduce using rule 4 (command -> fd value .)
    rt              reduce using rule 4 (command -> fd value .)
    left            reduce using rule 4 (command -> fd value .)
    lt              reduce using rule 4 (command -> fd value .)
    back            reduce using rule 4 (command -> fd value .)
    bk              reduce using rule 4 (command -> fd value .)
    setpos          reduce using rule 4 (command -> fd value .)
    setx            reduce using rule 4 (command -> fd value .)
    sety            reduce using rule 4 (command -> fd value .)
    home            reduce using rule 4 (command -> fd value .)
    pendown         reduce using rule 4 (command -> fd value .)
    pd              reduce using rule 4 (command -> fd value .)
    penup           reduce using rule 4 (command -> fd value .)
    pu              reduce using rule 4 (command -> fd value .)
    setpencolor     reduce using rule 4 (command -> fd value .)
    make            reduce using rule 4 (command -> fd value .)
    if              reduce using rule 4 (command -> fd value .)
    ifelse          reduce using rule 4 (command -> fd value .)
    repeat          reduce using rule 4 (command -> fd value .)
    while           reduce using rule 4 (command -> fd value .)
    to              reduce using rule 4 (command -> fd value .)
    STR             reduce using rule 4 (command -> fd value .)
    stop            reduce using rule 4 (command -> fd value .)
    $end            reduce using rule 4 (command -> fd value .)
    ]               reduce using rule 4 (command -> fd value .)
    end             reduce using rule 4 (command -> fd value .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 33

    (5) command -> right value .
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    forward         reduce using rule 5 (command -> right value .)
    fd              reduce using rule 5 (command -> right value .)
    right           reduce using rule 5 (command -> right value .)
    rt              reduce using rule 5 (command -> right value .)
    left            reduce using rule 5 (command -> right value .)
    lt              reduce using rule 5 (command -> right value .)
    back            reduce using rule 5 (command -> right value .)
    bk              reduce using rule 5 (command -> right value .)
    setpos          reduce using rule 5 (command -> right value .)
    setx            reduce using rule 5 (command -> right value .)
    sety            reduce using rule 5 (command -> right value .)
    home            reduce using rule 5 (command -> right value .)
    pendown         reduce using rule 5 (command -> right value .)
    pd              reduce using rule 5 (command -> right value .)
    penup           reduce using rule 5 (command -> right value .)
    pu              reduce using rule 5 (command -> right value .)
    setpencolor     reduce using rule 5 (command -> right value .)
    make            reduce using rule 5 (command -> right value .)
    if              reduce using rule 5 (command -> right value .)
    ifelse          reduce using rule 5 (command -> right value .)
    repeat          reduce using rule 5 (command -> right value .)
    while           reduce using rule 5 (command -> right value .)
    to              reduce using rule 5 (command -> right value .)
    STR             reduce using rule 5 (command -> right value .)
    stop            reduce using rule 5 (command -> right value .)
    $end            reduce using rule 5 (command -> right value .)
    ]               reduce using rule 5 (command -> right value .)
    end             reduce using rule 5 (command -> right value .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 34

    (6) command -> rt value .
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    forward         reduce using rule 6 (command -> rt value .)
    fd              reduce using rule 6 (command -> rt value .)
    right           reduce using rule 6 (command -> rt value .)
    rt              reduce using rule 6 (command -> rt value .)
    left            reduce using rule 6 (command -> rt value .)
    lt              reduce using rule 6 (command -> rt value .)
    back            reduce using rule 6 (command -> rt value .)
    bk              reduce using rule 6 (command -> rt value .)
    setpos          reduce using rule 6 (command -> rt value .)
    setx            reduce using rule 6 (command -> rt value .)
    sety            reduce using rule 6 (command -> rt value .)
    home            reduce using rule 6 (command -> rt value .)
    pendown         reduce using rule 6 (command -> rt value .)
    pd              reduce using rule 6 (command -> rt value .)
    penup           reduce using rule 6 (command -> rt value .)
    pu              reduce using rule 6 (command -> rt value .)
    setpencolor     reduce using rule 6 (command -> rt value .)
    make            reduce using rule 6 (command -> rt value .)
    if              reduce using rule 6 (command -> rt value .)
    ifelse          reduce using rule 6 (command -> rt value .)
    repeat          reduce using rule 6 (command -> rt value .)
    while           reduce using rule 6 (command -> rt value .)
    to              reduce using rule 6 (command -> rt value .)
    STR             reduce using rule 6 (command -> rt value .)
    stop            reduce using rule 6 (command -> rt value .)
    $end            reduce using rule 6 (command -> rt value .)
    ]               reduce using rule 6 (command -> rt value .)
    end             reduce using rule 6 (command -> rt value .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 35

    (7) command -> left value .
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    forward         reduce using rule 7 (command -> left value .)
    fd              reduce using rule 7 (command -> left value .)
    right           reduce using rule 7 (command -> left value .)
    rt              reduce using rule 7 (command -> left value .)
    left            reduce using rule 7 (command -> left value .)
    lt              reduce using rule 7 (command -> left value .)
    back            reduce using rule 7 (command -> left value .)
    bk              reduce using rule 7 (command -> left value .)
    setpos          reduce using rule 7 (command -> left value .)
    setx            reduce using rule 7 (command -> left value .)
    sety            reduce using rule 7 (command -> left value .)
    home            reduce using rule 7 (command -> left value .)
    pendown         reduce using rule 7 (command -> left value .)
    pd              reduce using rule 7 (command -> left value .)
    penup           reduce using rule 7 (command -> left value .)
    pu              reduce using rule 7 (command -> left value .)
    setpencolor     reduce using rule 7 (command -> left value .)
    make            reduce using rule 7 (command -> left value .)
    if              reduce using rule 7 (command -> left value .)
    ifelse          reduce using rule 7 (command -> left value .)
    repeat          reduce using rule 7 (command -> left value .)
    while           reduce using rule 7 (command -> left value .)
    to              reduce using rule 7 (command -> left value .)
    STR             reduce using rule 7 (command -> left value .)
    stop            reduce using rule 7 (command -> left value .)
    $end            reduce using rule 7 (command -> left value .)
    ]               reduce using rule 7 (command -> left value .)
    end             reduce using rule 7 (command -> left value .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 36

    (8) command -> lt value .
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    forward         reduce using rule 8 (command -> lt value .)
    fd              reduce using rule 8 (command -> lt value .)
    right           reduce using rule 8 (command -> lt value .)
    rt              reduce using rule 8 (command -> lt value .)
    left            reduce using rule 8 (command -> lt value .)
    lt              reduce using rule 8 (command -> lt value .)
    back            reduce using rule 8 (command -> lt value .)
    bk              reduce using rule 8 (command -> lt value .)
    setpos          reduce using rule 8 (command -> lt value .)
    setx            reduce using rule 8 (command -> lt value .)
    sety            reduce using rule 8 (command -> lt value .)
    home            reduce using rule 8 (command -> lt value .)
    pendown         reduce using rule 8 (command -> lt value .)
    pd              reduce using rule 8 (command -> lt value .)
    penup           reduce using rule 8 (command -> lt value .)
    pu              reduce using rule 8 (command -> lt value .)
    setpencolor     reduce using rule 8 (command -> lt value .)
    make            reduce using rule 8 (command -> lt value .)
    if              reduce using rule 8 (command -> lt value .)
    ifelse          reduce using rule 8 (command -> lt value .)
    repeat          reduce using rule 8 (command -> lt value .)
    while           reduce using rule 8 (command -> lt value .)
    to              reduce using rule 8 (command -> lt value .)
    STR             reduce using rule 8 (command -> lt value .)
    stop            reduce using rule 8 (command -> lt value .)
    $end            reduce using rule 8 (command -> lt value .)
    ]               reduce using rule 8 (command -> lt value .)
    end             reduce using rule 8 (command -> lt value .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 37

    (9) command -> back value .
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    forward         reduce using rule 9 (command -> back value .)
    fd              reduce using rule 9 (command -> back value .)
    right           reduce using rule 9 (command -> back value .)
    rt              reduce using rule 9 (command -> back value .)
    left            reduce using rule 9 (command -> back value .)
    lt              reduce using rule 9 (command -> back value .)
    back            reduce using rule 9 (command -> back value .)
    bk              reduce using rule 9 (command -> back value .)
    setpos          reduce using rule 9 (command -> back value .)
    setx            reduce using rule 9 (command -> back value .)
    sety            reduce using rule 9 (command -> back value .)
    home            reduce using rule 9 (command -> back value .)
    pendown         reduce using rule 9 (command -> back value .)
    pd              reduce using rule 9 (command -> back value .)
    penup           reduce using rule 9 (command -> back value .)
    pu              reduce using rule 9 (command -> back value .)
    setpencolor     reduce using rule 9 (command -> back value .)
    make            reduce using rule 9 (command -> back value .)
    if              reduce using rule 9 (command -> back value .)
    ifelse          reduce using rule 9 (command -> back value .)
    repeat          reduce using rule 9 (command -> back value .)
    while           reduce using rule 9 (command -> back value .)
    to              reduce using rule 9 (command -> back value .)
    STR             reduce using rule 9 (command -> back value .)
    stop            reduce using rule 9 (command -> back value .)
    $end            reduce using rule 9 (command -> back value .)
    ]               reduce using rule 9 (command -> back value .)
    end             reduce using rule 9 (command -> back value .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 38

    (10) command -> bk value .
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    forward         reduce using rule 10 (command -> bk value .)
    fd              reduce using rule 10 (command -> bk value .)
    right           reduce using rule 10 (command -> bk value .)
    rt              reduce using rule 10 (command -> bk value .)
    left            reduce using rule 10 (command -> bk value .)
    lt              reduce using rule 10 (command -> bk value .)
    back            reduce using rule 10 (command -> bk value .)
    bk              reduce using rule 10 (command -> bk value .)
    setpos          reduce using rule 10 (command -> bk value .)
    setx            reduce using rule 10 (command -> bk value .)
    sety            reduce using rule 10 (command -> bk value .)
    home            reduce using rule 10 (command -> bk value .)
    pendown         reduce using rule 10 (command -> bk value .)
    pd              reduce using rule 10 (command -> bk value .)
    penup           reduce using rule 10 (command -> bk value .)
    pu              reduce using rule 10 (command -> bk value .)
    setpencolor     reduce using rule 10 (command -> bk value .)
    make            reduce using rule 10 (command -> bk value .)
    if              reduce using rule 10 (command -> bk value .)
    ifelse          reduce using rule 10 (command -> bk value .)
    repeat          reduce using rule 10 (command -> bk value .)
    while           reduce using rule 10 (command -> bk value .)
    to              reduce using rule 10 (command -> bk value .)
    STR             reduce using rule 10 (command -> bk value .)
    stop            reduce using rule 10 (command -> bk value .)
    $end            reduce using rule 10 (command -> bk value .)
    ]               reduce using rule 10 (command -> bk value .)
    end             reduce using rule 10 (command -> bk value .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 39

    (11) command -> setpos [ . value value ]
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 56

state 40

    (12) command -> setpos value . value
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 57

state 41

    (13) command -> setx value .
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    forward         reduce using rule 13 (command -> setx value .)
    fd              reduce using rule 13 (command -> setx value .)
    right           reduce using rule 13 (command -> setx value .)
    rt              reduce using rule 13 (command -> setx value .)
    left            reduce using rule 13 (command -> setx value .)
    lt              reduce using rule 13 (command -> setx value .)
    back            reduce using rule 13 (command -> setx value .)
    bk              reduce using rule 13 (command -> setx value .)
    setpos          reduce using rule 13 (command -> setx value .)
    setx            reduce using rule 13 (command -> setx value .)
    sety            reduce using rule 13 (command -> setx value .)
    home            reduce using rule 13 (command -> setx value .)
    pendown         reduce using rule 13 (command -> setx value .)
    pd              reduce using rule 13 (command -> setx value .)
    penup           reduce using rule 13 (command -> setx value .)
    pu              reduce using rule 13 (command -> setx value .)
    setpencolor     reduce using rule 13 (command -> setx value .)
    make            reduce using rule 13 (command -> setx value .)
    if              reduce using rule 13 (command -> setx value .)
    ifelse          reduce using rule 13 (command -> setx value .)
    repeat          reduce using rule 13 (command -> setx value .)
    while           reduce using rule 13 (command -> setx value .)
    to              reduce using rule 13 (command -> setx value .)
    STR             reduce using rule 13 (command -> setx value .)
    stop            reduce using rule 13 (command -> setx value .)
    $end            reduce using rule 13 (command -> setx value .)
    ]               reduce using rule 13 (command -> setx value .)
    end             reduce using rule 13 (command -> setx value .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 42

    (14) command -> sety value .
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    forward         reduce using rule 14 (command -> sety value .)
    fd              reduce using rule 14 (command -> sety value .)
    right           reduce using rule 14 (command -> sety value .)
    rt              reduce using rule 14 (command -> sety value .)
    left            reduce using rule 14 (command -> sety value .)
    lt              reduce using rule 14 (command -> sety value .)
    back            reduce using rule 14 (command -> sety value .)
    bk              reduce using rule 14 (command -> sety value .)
    setpos          reduce using rule 14 (command -> sety value .)
    setx            reduce using rule 14 (command -> sety value .)
    sety            reduce using rule 14 (command -> sety value .)
    home            reduce using rule 14 (command -> sety value .)
    pendown         reduce using rule 14 (command -> sety value .)
    pd              reduce using rule 14 (command -> sety value .)
    penup           reduce using rule 14 (command -> sety value .)
    pu              reduce using rule 14 (command -> sety value .)
    setpencolor     reduce using rule 14 (command -> sety value .)
    make            reduce using rule 14 (command -> sety value .)
    if              reduce using rule 14 (command -> sety value .)
    ifelse          reduce using rule 14 (command -> sety value .)
    repeat          reduce using rule 14 (command -> sety value .)
    while           reduce using rule 14 (command -> sety value .)
    to              reduce using rule 14 (command -> sety value .)
    STR             reduce using rule 14 (command -> sety value .)
    stop            reduce using rule 14 (command -> sety value .)
    $end            reduce using rule 14 (command -> sety value .)
    ]               reduce using rule 14 (command -> sety value .)
    end             reduce using rule 14 (command -> sety value .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 43

    (20) command -> setpencolor [ . color ]
    (21) color -> . value value value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    color                          shift and go to state 58
    value                          shift and go to state 59

state 44

    (28) command -> make VAR . value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 60

state 45

    (29) command -> if value . SIGN value [ program ]
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    SIGN            shift and go to state 61
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 46

    (30) command -> ifelse value . SIGN value [ program ]
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    SIGN            shift and go to state 62
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 47

    (31) command -> repeat value . [ program ]
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    [               shift and go to state 63
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 48

    (32) command -> while [ . value SIGN value ] [ program ]
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 64

state 49

    (33) command -> to STR . varlist program end
    (34) varlist -> .
    (35) varlist -> . VAR
    (36) varlist -> . varlist VAR

  ! shift/reduce conflict for VAR resolved as shift
    forward         reduce using rule 34 (varlist -> .)
    fd              reduce using rule 34 (varlist -> .)
    right           reduce using rule 34 (varlist -> .)
    rt              reduce using rule 34 (varlist -> .)
    left            reduce using rule 34 (varlist -> .)
    lt              reduce using rule 34 (varlist -> .)
    back            reduce using rule 34 (varlist -> .)
    bk              reduce using rule 34 (varlist -> .)
    setpos          reduce using rule 34 (varlist -> .)
    setx            reduce using rule 34 (varlist -> .)
    sety            reduce using rule 34 (varlist -> .)
    home            reduce using rule 34 (varlist -> .)
    pendown         reduce using rule 34 (varlist -> .)
    pd              reduce using rule 34 (varlist -> .)
    penup           reduce using rule 34 (varlist -> .)
    pu              reduce using rule 34 (varlist -> .)
    setpencolor     reduce using rule 34 (varlist -> .)
    make            reduce using rule 34 (varlist -> .)
    if              reduce using rule 34 (varlist -> .)
    ifelse          reduce using rule 34 (varlist -> .)
    repeat          reduce using rule 34 (varlist -> .)
    while           reduce using rule 34 (varlist -> .)
    to              reduce using rule 34 (varlist -> .)
    STR             reduce using rule 34 (varlist -> .)
    stop            reduce using rule 34 (varlist -> .)
    VAR             shift and go to state 66

  ! VAR             [ reduce using rule 34 (varlist -> .) ]

    varlist                        shift and go to state 65

state 50

    (37) command -> STR valuelist .
    (40) valuelist -> valuelist . value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    forward         reduce using rule 37 (command -> STR valuelist .)
    fd              reduce using rule 37 (command -> STR valuelist .)
    right           reduce using rule 37 (command -> STR valuelist .)
    rt              reduce using rule 37 (command -> STR valuelist .)
    left            reduce using rule 37 (command -> STR valuelist .)
    lt              reduce using rule 37 (command -> STR valuelist .)
    back            reduce using rule 37 (command -> STR valuelist .)
    bk              reduce using rule 37 (command -> STR valuelist .)
    setpos          reduce using rule 37 (command -> STR valuelist .)
    setx            reduce using rule 37 (command -> STR valuelist .)
    sety            reduce using rule 37 (command -> STR valuelist .)
    home            reduce using rule 37 (command -> STR valuelist .)
    pendown         reduce using rule 37 (command -> STR valuelist .)
    pd              reduce using rule 37 (command -> STR valuelist .)
    penup           reduce using rule 37 (command -> STR valuelist .)
    pu              reduce using rule 37 (command -> STR valuelist .)
    setpencolor     reduce using rule 37 (command -> STR valuelist .)
    make            reduce using rule 37 (command -> STR valuelist .)
    if              reduce using rule 37 (command -> STR valuelist .)
    ifelse          reduce using rule 37 (command -> STR valuelist .)
    repeat          reduce using rule 37 (command -> STR valuelist .)
    while           reduce using rule 37 (command -> STR valuelist .)
    to              reduce using rule 37 (command -> STR valuelist .)
    STR             reduce using rule 37 (command -> STR valuelist .)
    stop            reduce using rule 37 (command -> STR valuelist .)
    $end            reduce using rule 37 (command -> STR valuelist .)
    ]               reduce using rule 37 (command -> STR valuelist .)
    end             reduce using rule 37 (command -> STR valuelist .)
    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 67

state 51

    (39) valuelist -> value .
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    NUMBER          reduce using rule 39 (valuelist -> value .)
    VAR             reduce using rule 39 (valuelist -> value .)
    forward         reduce using rule 39 (valuelist -> value .)
    fd              reduce using rule 39 (valuelist -> value .)
    right           reduce using rule 39 (valuelist -> value .)
    rt              reduce using rule 39 (valuelist -> value .)
    left            reduce using rule 39 (valuelist -> value .)
    lt              reduce using rule 39 (valuelist -> value .)
    back            reduce using rule 39 (valuelist -> value .)
    bk              reduce using rule 39 (valuelist -> value .)
    setpos          reduce using rule 39 (valuelist -> value .)
    setx            reduce using rule 39 (valuelist -> value .)
    sety            reduce using rule 39 (valuelist -> value .)
    home            reduce using rule 39 (valuelist -> value .)
    pendown         reduce using rule 39 (valuelist -> value .)
    pd              reduce using rule 39 (valuelist -> value .)
    penup           reduce using rule 39 (valuelist -> value .)
    pu              reduce using rule 39 (valuelist -> value .)
    setpencolor     reduce using rule 39 (valuelist -> value .)
    make            reduce using rule 39 (valuelist -> value .)
    if              reduce using rule 39 (valuelist -> value .)
    ifelse          reduce using rule 39 (valuelist -> value .)
    repeat          reduce using rule 39 (valuelist -> value .)
    while           reduce using rule 39 (valuelist -> value .)
    to              reduce using rule 39 (valuelist -> value .)
    STR             reduce using rule 39 (valuelist -> value .)
    stop            reduce using rule 39 (valuelist -> value .)
    $end            reduce using rule 39 (valuelist -> value .)
    ]               reduce using rule 39 (valuelist -> value .)
    end             reduce using rule 39 (valuelist -> value .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 52

    (24) value -> value + . value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 68

state 53

    (25) value -> value - . value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 69

state 54

    (26) value -> value * . value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 70

state 55

    (27) value -> value / . value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 71

state 56

    (11) command -> setpos [ value . value ]
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 72

state 57

    (12) command -> setpos value value .
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    forward         reduce using rule 12 (command -> setpos value value .)
    fd              reduce using rule 12 (command -> setpos value value .)
    right           reduce using rule 12 (command -> setpos value value .)
    rt              reduce using rule 12 (command -> setpos value value .)
    left            reduce using rule 12 (command -> setpos value value .)
    lt              reduce using rule 12 (command -> setpos value value .)
    back            reduce using rule 12 (command -> setpos value value .)
    bk              reduce using rule 12 (command -> setpos value value .)
    setpos          reduce using rule 12 (command -> setpos value value .)
    setx            reduce using rule 12 (command -> setpos value value .)
    sety            reduce using rule 12 (command -> setpos value value .)
    home            reduce using rule 12 (command -> setpos value value .)
    pendown         reduce using rule 12 (command -> setpos value value .)
    pd              reduce using rule 12 (command -> setpos value value .)
    penup           reduce using rule 12 (command -> setpos value value .)
    pu              reduce using rule 12 (command -> setpos value value .)
    setpencolor     reduce using rule 12 (command -> setpos value value .)
    make            reduce using rule 12 (command -> setpos value value .)
    if              reduce using rule 12 (command -> setpos value value .)
    ifelse          reduce using rule 12 (command -> setpos value value .)
    repeat          reduce using rule 12 (command -> setpos value value .)
    while           reduce using rule 12 (command -> setpos value value .)
    to              reduce using rule 12 (command -> setpos value value .)
    STR             reduce using rule 12 (command -> setpos value value .)
    stop            reduce using rule 12 (command -> setpos value value .)
    $end            reduce using rule 12 (command -> setpos value value .)
    ]               reduce using rule 12 (command -> setpos value value .)
    end             reduce using rule 12 (command -> setpos value value .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 58

    (20) command -> setpencolor [ color . ]

    ]               shift and go to state 73


state 59

    (21) color -> value . value value
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 74

state 60

    (28) command -> make VAR value .
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    forward         reduce using rule 28 (command -> make VAR value .)
    fd              reduce using rule 28 (command -> make VAR value .)
    right           reduce using rule 28 (command -> make VAR value .)
    rt              reduce using rule 28 (command -> make VAR value .)
    left            reduce using rule 28 (command -> make VAR value .)
    lt              reduce using rule 28 (command -> make VAR value .)
    back            reduce using rule 28 (command -> make VAR value .)
    bk              reduce using rule 28 (command -> make VAR value .)
    setpos          reduce using rule 28 (command -> make VAR value .)
    setx            reduce using rule 28 (command -> make VAR value .)
    sety            reduce using rule 28 (command -> make VAR value .)
    home            reduce using rule 28 (command -> make VAR value .)
    pendown         reduce using rule 28 (command -> make VAR value .)
    pd              reduce using rule 28 (command -> make VAR value .)
    penup           reduce using rule 28 (command -> make VAR value .)
    pu              reduce using rule 28 (command -> make VAR value .)
    setpencolor     reduce using rule 28 (command -> make VAR value .)
    make            reduce using rule 28 (command -> make VAR value .)
    if              reduce using rule 28 (command -> make VAR value .)
    ifelse          reduce using rule 28 (command -> make VAR value .)
    repeat          reduce using rule 28 (command -> make VAR value .)
    while           reduce using rule 28 (command -> make VAR value .)
    to              reduce using rule 28 (command -> make VAR value .)
    STR             reduce using rule 28 (command -> make VAR value .)
    stop            reduce using rule 28 (command -> make VAR value .)
    $end            reduce using rule 28 (command -> make VAR value .)
    ]               reduce using rule 28 (command -> make VAR value .)
    end             reduce using rule 28 (command -> make VAR value .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 61

    (29) command -> if value SIGN . value [ program ]
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 75

state 62

    (30) command -> ifelse value SIGN . value [ program ]
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 76

state 63

    (31) command -> repeat value [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . forward value
    (4) command -> . fd value
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (28) command -> . make VAR value
    (29) command -> . if value SIGN value [ program ]
    (30) command -> . ifelse value SIGN value [ program ]
    (31) command -> . repeat value [ program ]
    (32) command -> . while [ value SIGN value ] [ program ]
    (33) command -> . to STR varlist program end
    (37) command -> . STR valuelist
    (41) command -> . stop

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24
    to              shift and go to state 25
    STR             shift and go to state 26
    stop            shift and go to state 27

    program                        shift and go to state 77
    command                        shift and go to state 2

state 64

    (32) command -> while [ value . SIGN value ] [ program ]
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    SIGN            shift and go to state 78
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 65

    (33) command -> to STR varlist . program end
    (36) varlist -> varlist . VAR
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . forward value
    (4) command -> . fd value
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (28) command -> . make VAR value
    (29) command -> . if value SIGN value [ program ]
    (30) command -> . ifelse value SIGN value [ program ]
    (31) command -> . repeat value [ program ]
    (32) command -> . while [ value SIGN value ] [ program ]
    (33) command -> . to STR varlist program end
    (37) command -> . STR valuelist
    (41) command -> . stop

    VAR             shift and go to state 80
    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24
    to              shift and go to state 25
    STR             shift and go to state 26
    stop            shift and go to state 27

    program                        shift and go to state 79
    command                        shift and go to state 2

state 66

    (35) varlist -> VAR .

    VAR             reduce using rule 35 (varlist -> VAR .)
    forward         reduce using rule 35 (varlist -> VAR .)
    fd              reduce using rule 35 (varlist -> VAR .)
    right           reduce using rule 35 (varlist -> VAR .)
    rt              reduce using rule 35 (varlist -> VAR .)
    left            reduce using rule 35 (varlist -> VAR .)
    lt              reduce using rule 35 (varlist -> VAR .)
    back            reduce using rule 35 (varlist -> VAR .)
    bk              reduce using rule 35 (varlist -> VAR .)
    setpos          reduce using rule 35 (varlist -> VAR .)
    setx            reduce using rule 35 (varlist -> VAR .)
    sety            reduce using rule 35 (varlist -> VAR .)
    home            reduce using rule 35 (varlist -> VAR .)
    pendown         reduce using rule 35 (varlist -> VAR .)
    pd              reduce using rule 35 (varlist -> VAR .)
    penup           reduce using rule 35 (varlist -> VAR .)
    pu              reduce using rule 35 (varlist -> VAR .)
    setpencolor     reduce using rule 35 (varlist -> VAR .)
    make            reduce using rule 35 (varlist -> VAR .)
    if              reduce using rule 35 (varlist -> VAR .)
    ifelse          reduce using rule 35 (varlist -> VAR .)
    repeat          reduce using rule 35 (varlist -> VAR .)
    while           reduce using rule 35 (varlist -> VAR .)
    to              reduce using rule 35 (varlist -> VAR .)
    STR             reduce using rule 35 (varlist -> VAR .)
    stop            reduce using rule 35 (varlist -> VAR .)


state 67

    (40) valuelist -> valuelist value .
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    NUMBER          reduce using rule 40 (valuelist -> valuelist value .)
    VAR             reduce using rule 40 (valuelist -> valuelist value .)
    forward         reduce using rule 40 (valuelist -> valuelist value .)
    fd              reduce using rule 40 (valuelist -> valuelist value .)
    right           reduce using rule 40 (valuelist -> valuelist value .)
    rt              reduce using rule 40 (valuelist -> valuelist value .)
    left            reduce using rule 40 (valuelist -> valuelist value .)
    lt              reduce using rule 40 (valuelist -> valuelist value .)
    back            reduce using rule 40 (valuelist -> valuelist value .)
    bk              reduce using rule 40 (valuelist -> valuelist value .)
    setpos          reduce using rule 40 (valuelist -> valuelist value .)
    setx            reduce using rule 40 (valuelist -> valuelist value .)
    sety            reduce using rule 40 (valuelist -> valuelist value .)
    home            reduce using rule 40 (valuelist -> valuelist value .)
    pendown         reduce using rule 40 (valuelist -> valuelist value .)
    pd              reduce using rule 40 (valuelist -> valuelist value .)
    penup           reduce using rule 40 (valuelist -> valuelist value .)
    pu              reduce using rule 40 (valuelist -> valuelist value .)
    setpencolor     reduce using rule 40 (valuelist -> valuelist value .)
    make            reduce using rule 40 (valuelist -> valuelist value .)
    if              reduce using rule 40 (valuelist -> valuelist value .)
    ifelse          reduce using rule 40 (valuelist -> valuelist value .)
    repeat          reduce using rule 40 (valuelist -> valuelist value .)
    while           reduce using rule 40 (valuelist -> valuelist value .)
    to              reduce using rule 40 (valuelist -> valuelist value .)
    STR             reduce using rule 40 (valuelist -> valuelist value .)
    stop            reduce using rule 40 (valuelist -> valuelist value .)
    $end            reduce using rule 40 (valuelist -> valuelist value .)
    ]               reduce using rule 40 (valuelist -> valuelist value .)
    end             reduce using rule 40 (valuelist -> valuelist value .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 68

    (24) value -> value + value .
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    +               reduce using rule 24 (value -> value + value .)
    -               reduce using rule 24 (value -> value + value .)
    forward         reduce using rule 24 (value -> value + value .)
    fd              reduce using rule 24 (value -> value + value .)
    right           reduce using rule 24 (value -> value + value .)
    rt              reduce using rule 24 (value -> value + value .)
    left            reduce using rule 24 (value -> value + value .)
    lt              reduce using rule 24 (value -> value + value .)
    back            reduce using rule 24 (value -> value + value .)
    bk              reduce using rule 24 (value -> value + value .)
    setpos          reduce using rule 24 (value -> value + value .)
    setx            reduce using rule 24 (value -> value + value .)
    sety            reduce using rule 24 (value -> value + value .)
    home            reduce using rule 24 (value -> value + value .)
    pendown         reduce using rule 24 (value -> value + value .)
    pd              reduce using rule 24 (value -> value + value .)
    penup           reduce using rule 24 (value -> value + value .)
    pu              reduce using rule 24 (value -> value + value .)
    setpencolor     reduce using rule 24 (value -> value + value .)
    make            reduce using rule 24 (value -> value + value .)
    if              reduce using rule 24 (value -> value + value .)
    ifelse          reduce using rule 24 (value -> value + value .)
    repeat          reduce using rule 24 (value -> value + value .)
    while           reduce using rule 24 (value -> value + value .)
    to              reduce using rule 24 (value -> value + value .)
    STR             reduce using rule 24 (value -> value + value .)
    stop            reduce using rule 24 (value -> value + value .)
    $end            reduce using rule 24 (value -> value + value .)
    ]               reduce using rule 24 (value -> value + value .)
    end             reduce using rule 24 (value -> value + value .)
    NUMBER          reduce using rule 24 (value -> value + value .)
    VAR             reduce using rule 24 (value -> value + value .)
    SIGN            reduce using rule 24 (value -> value + value .)
    [               reduce using rule 24 (value -> value + value .)
    *               shift and go to state 54
    /               shift and go to state 55

  ! *               [ reduce using rule 24 (value -> value + value .) ]
  ! /               [ reduce using rule 24 (value -> value + value .) ]
  ! +               [ shift and go to state 52 ]
  ! -               [ shift and go to state 53 ]


state 69

    (25) value -> value - value .
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    +               reduce using rule 25 (value -> value - value .)
    -               reduce using rule 25 (value -> value - value .)
    forward         reduce using rule 25 (value -> value - value .)
    fd              reduce using rule 25 (value -> value - value .)
    right           reduce using rule 25 (value -> value - value .)
    rt              reduce using rule 25 (value -> value - value .)
    left            reduce using rule 25 (value -> value - value .)
    lt              reduce using rule 25 (value -> value - value .)
    back            reduce using rule 25 (value -> value - value .)
    bk              reduce using rule 25 (value -> value - value .)
    setpos          reduce using rule 25 (value -> value - value .)
    setx            reduce using rule 25 (value -> value - value .)
    sety            reduce using rule 25 (value -> value - value .)
    home            reduce using rule 25 (value -> value - value .)
    pendown         reduce using rule 25 (value -> value - value .)
    pd              reduce using rule 25 (value -> value - value .)
    penup           reduce using rule 25 (value -> value - value .)
    pu              reduce using rule 25 (value -> value - value .)
    setpencolor     reduce using rule 25 (value -> value - value .)
    make            reduce using rule 25 (value -> value - value .)
    if              reduce using rule 25 (value -> value - value .)
    ifelse          reduce using rule 25 (value -> value - value .)
    repeat          reduce using rule 25 (value -> value - value .)
    while           reduce using rule 25 (value -> value - value .)
    to              reduce using rule 25 (value -> value - value .)
    STR             reduce using rule 25 (value -> value - value .)
    stop            reduce using rule 25 (value -> value - value .)
    $end            reduce using rule 25 (value -> value - value .)
    ]               reduce using rule 25 (value -> value - value .)
    end             reduce using rule 25 (value -> value - value .)
    NUMBER          reduce using rule 25 (value -> value - value .)
    VAR             reduce using rule 25 (value -> value - value .)
    SIGN            reduce using rule 25 (value -> value - value .)
    [               reduce using rule 25 (value -> value - value .)
    *               shift and go to state 54
    /               shift and go to state 55

  ! *               [ reduce using rule 25 (value -> value - value .) ]
  ! /               [ reduce using rule 25 (value -> value - value .) ]
  ! +               [ shift and go to state 52 ]
  ! -               [ shift and go to state 53 ]


state 70

    (26) value -> value * value .
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    +               reduce using rule 26 (value -> value * value .)
    -               reduce using rule 26 (value -> value * value .)
    *               reduce using rule 26 (value -> value * value .)
    /               reduce using rule 26 (value -> value * value .)
    forward         reduce using rule 26 (value -> value * value .)
    fd              reduce using rule 26 (value -> value * value .)
    right           reduce using rule 26 (value -> value * value .)
    rt              reduce using rule 26 (value -> value * value .)
    left            reduce using rule 26 (value -> value * value .)
    lt              reduce using rule 26 (value -> value * value .)
    back            reduce using rule 26 (value -> value * value .)
    bk              reduce using rule 26 (value -> value * value .)
    setpos          reduce using rule 26 (value -> value * value .)
    setx            reduce using rule 26 (value -> value * value .)
    sety            reduce using rule 26 (value -> value * value .)
    home            reduce using rule 26 (value -> value * value .)
    pendown         reduce using rule 26 (value -> value * value .)
    pd              reduce using rule 26 (value -> value * value .)
    penup           reduce using rule 26 (value -> value * value .)
    pu              reduce using rule 26 (value -> value * value .)
    setpencolor     reduce using rule 26 (value -> value * value .)
    make            reduce using rule 26 (value -> value * value .)
    if              reduce using rule 26 (value -> value * value .)
    ifelse          reduce using rule 26 (value -> value * value .)
    repeat          reduce using rule 26 (value -> value * value .)
    while           reduce using rule 26 (value -> value * value .)
    to              reduce using rule 26 (value -> value * value .)
    STR             reduce using rule 26 (value -> value * value .)
    stop            reduce using rule 26 (value -> value * value .)
    $end            reduce using rule 26 (value -> value * value .)
    ]               reduce using rule 26 (value -> value * value .)
    end             reduce using rule 26 (value -> value * value .)
    NUMBER          reduce using rule 26 (value -> value * value .)
    VAR             reduce using rule 26 (value -> value * value .)
    SIGN            reduce using rule 26 (value -> value * value .)
    [               reduce using rule 26 (value -> value * value .)

  ! +               [ shift and go to state 52 ]
  ! -               [ shift and go to state 53 ]
  ! *               [ shift and go to state 54 ]
  ! /               [ shift and go to state 55 ]


state 71

    (27) value -> value / value .
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    +               reduce using rule 27 (value -> value / value .)
    -               reduce using rule 27 (value -> value / value .)
    *               reduce using rule 27 (value -> value / value .)
    /               reduce using rule 27 (value -> value / value .)
    forward         reduce using rule 27 (value -> value / value .)
    fd              reduce using rule 27 (value -> value / value .)
    right           reduce using rule 27 (value -> value / value .)
    rt              reduce using rule 27 (value -> value / value .)
    left            reduce using rule 27 (value -> value / value .)
    lt              reduce using rule 27 (value -> value / value .)
    back            reduce using rule 27 (value -> value / value .)
    bk              reduce using rule 27 (value -> value / value .)
    setpos          reduce using rule 27 (value -> value / value .)
    setx            reduce using rule 27 (value -> value / value .)
    sety            reduce using rule 27 (value -> value / value .)
    home            reduce using rule 27 (value -> value / value .)
    pendown         reduce using rule 27 (value -> value / value .)
    pd              reduce using rule 27 (value -> value / value .)
    penup           reduce using rule 27 (value -> value / value .)
    pu              reduce using rule 27 (value -> value / value .)
    setpencolor     reduce using rule 27 (value -> value / value .)
    make            reduce using rule 27 (value -> value / value .)
    if              reduce using rule 27 (value -> value / value .)
    ifelse          reduce using rule 27 (value -> value / value .)
    repeat          reduce using rule 27 (value -> value / value .)
    while           reduce using rule 27 (value -> value / value .)
    to              reduce using rule 27 (value -> value / value .)
    STR             reduce using rule 27 (value -> value / value .)
    stop            reduce using rule 27 (value -> value / value .)
    $end            reduce using rule 27 (value -> value / value .)
    ]               reduce using rule 27 (value -> value / value .)
    end             reduce using rule 27 (value -> value / value .)
    NUMBER          reduce using rule 27 (value -> value / value .)
    VAR             reduce using rule 27 (value -> value / value .)
    SIGN            reduce using rule 27 (value -> value / value .)
    [               reduce using rule 27 (value -> value / value .)

  ! +               [ shift and go to state 52 ]
  ! -               [ shift and go to state 53 ]
  ! *               [ shift and go to state 54 ]
  ! /               [ shift and go to state 55 ]


state 72

    (11) command -> setpos [ value value . ]
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    ]               shift and go to state 81
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 73

    (20) command -> setpencolor [ color ] .

    forward         reduce using rule 20 (command -> setpencolor [ color ] .)
    fd              reduce using rule 20 (command -> setpencolor [ color ] .)
    right           reduce using rule 20 (command -> setpencolor [ color ] .)
    rt              reduce using rule 20 (command -> setpencolor [ color ] .)
    left            reduce using rule 20 (command -> setpencolor [ color ] .)
    lt              reduce using rule 20 (command -> setpencolor [ color ] .)
    back            reduce using rule 20 (command -> setpencolor [ color ] .)
    bk              reduce using rule 20 (command -> setpencolor [ color ] .)
    setpos          reduce using rule 20 (command -> setpencolor [ color ] .)
    setx            reduce using rule 20 (command -> setpencolor [ color ] .)
    sety            reduce using rule 20 (command -> setpencolor [ color ] .)
    home            reduce using rule 20 (command -> setpencolor [ color ] .)
    pendown         reduce using rule 20 (command -> setpencolor [ color ] .)
    pd              reduce using rule 20 (command -> setpencolor [ color ] .)
    penup           reduce using rule 20 (command -> setpencolor [ color ] .)
    pu              reduce using rule 20 (command -> setpencolor [ color ] .)
    setpencolor     reduce using rule 20 (command -> setpencolor [ color ] .)
    make            reduce using rule 20 (command -> setpencolor [ color ] .)
    if              reduce using rule 20 (command -> setpencolor [ color ] .)
    ifelse          reduce using rule 20 (command -> setpencolor [ color ] .)
    repeat          reduce using rule 20 (command -> setpencolor [ color ] .)
    while           reduce using rule 20 (command -> setpencolor [ color ] .)
    to              reduce using rule 20 (command -> setpencolor [ color ] .)
    STR             reduce using rule 20 (command -> setpencolor [ color ] .)
    stop            reduce using rule 20 (command -> setpencolor [ color ] .)
    $end            reduce using rule 20 (command -> setpencolor [ color ] .)
    ]               reduce using rule 20 (command -> setpencolor [ color ] .)
    end             reduce using rule 20 (command -> setpencolor [ color ] .)


state 74

    (21) color -> value value . value
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55
    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 82

state 75

    (29) command -> if value SIGN value . [ program ]
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    [               shift and go to state 83
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 76

    (30) command -> ifelse value SIGN value . [ program ]
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    [               shift and go to state 84
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 77

    (31) command -> repeat value [ program . ]
    (2) program -> program . command
    (3) command -> . forward value
    (4) command -> . fd value
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (28) command -> . make VAR value
    (29) command -> . if value SIGN value [ program ]
    (30) command -> . ifelse value SIGN value [ program ]
    (31) command -> . repeat value [ program ]
    (32) command -> . while [ value SIGN value ] [ program ]
    (33) command -> . to STR varlist program end
    (37) command -> . STR valuelist
    (41) command -> . stop

    ]               shift and go to state 85
    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24
    to              shift and go to state 25
    STR             shift and go to state 26
    stop            shift and go to state 27

    command                        shift and go to state 28

state 78

    (32) command -> while [ value SIGN . value ] [ program ]
    (22) value -> . NUMBER
    (23) value -> . VAR
    (24) value -> . value + value
    (25) value -> . value - value
    (26) value -> . value * value
    (27) value -> . value / value

    NUMBER          shift and go to state 30
    VAR             shift and go to state 31

    value                          shift and go to state 86

state 79

    (33) command -> to STR varlist program . end
    (2) program -> program . command
    (3) command -> . forward value
    (4) command -> . fd value
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (28) command -> . make VAR value
    (29) command -> . if value SIGN value [ program ]
    (30) command -> . ifelse value SIGN value [ program ]
    (31) command -> . repeat value [ program ]
    (32) command -> . while [ value SIGN value ] [ program ]
    (33) command -> . to STR varlist program end
    (37) command -> . STR valuelist
    (41) command -> . stop

    end             shift and go to state 87
    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24
    to              shift and go to state 25
    STR             shift and go to state 26
    stop            shift and go to state 27

    command                        shift and go to state 28

state 80

    (36) varlist -> varlist VAR .

    VAR             reduce using rule 36 (varlist -> varlist VAR .)
    forward         reduce using rule 36 (varlist -> varlist VAR .)
    fd              reduce using rule 36 (varlist -> varlist VAR .)
    right           reduce using rule 36 (varlist -> varlist VAR .)
    rt              reduce using rule 36 (varlist -> varlist VAR .)
    left            reduce using rule 36 (varlist -> varlist VAR .)
    lt              reduce using rule 36 (varlist -> varlist VAR .)
    back            reduce using rule 36 (varlist -> varlist VAR .)
    bk              reduce using rule 36 (varlist -> varlist VAR .)
    setpos          reduce using rule 36 (varlist -> varlist VAR .)
    setx            reduce using rule 36 (varlist -> varlist VAR .)
    sety            reduce using rule 36 (varlist -> varlist VAR .)
    home            reduce using rule 36 (varlist -> varlist VAR .)
    pendown         reduce using rule 36 (varlist -> varlist VAR .)
    pd              reduce using rule 36 (varlist -> varlist VAR .)
    penup           reduce using rule 36 (varlist -> varlist VAR .)
    pu              reduce using rule 36 (varlist -> varlist VAR .)
    setpencolor     reduce using rule 36 (varlist -> varlist VAR .)
    make            reduce using rule 36 (varlist -> varlist VAR .)
    if              reduce using rule 36 (varlist -> varlist VAR .)
    ifelse          reduce using rule 36 (varlist -> varlist VAR .)
    repeat          reduce using rule 36 (varlist -> varlist VAR .)
    while           reduce using rule 36 (varlist -> varlist VAR .)
    to              reduce using rule 36 (varlist -> varlist VAR .)
    STR             reduce using rule 36 (varlist -> varlist VAR .)
    stop            reduce using rule 36 (varlist -> varlist VAR .)


state 81

    (11) command -> setpos [ value value ] .

    forward         reduce using rule 11 (command -> setpos [ value value ] .)
    fd              reduce using rule 11 (command -> setpos [ value value ] .)
    right           reduce using rule 11 (command -> setpos [ value value ] .)
    rt              reduce using rule 11 (command -> setpos [ value value ] .)
    left            reduce using rule 11 (command -> setpos [ value value ] .)
    lt              reduce using rule 11 (command -> setpos [ value value ] .)
    back            reduce using rule 11 (command -> setpos [ value value ] .)
    bk              reduce using rule 11 (command -> setpos [ value value ] .)
    setpos          reduce using rule 11 (command -> setpos [ value value ] .)
    setx            reduce using rule 11 (command -> setpos [ value value ] .)
    sety            reduce using rule 11 (command -> setpos [ value value ] .)
    home            reduce using rule 11 (command -> setpos [ value value ] .)
    pendown         reduce using rule 11 (command -> setpos [ value value ] .)
    pd              reduce using rule 11 (command -> setpos [ value value ] .)
    penup           reduce using rule 11 (command -> setpos [ value value ] .)
    pu              reduce using rule 11 (command -> setpos [ value value ] .)
    setpencolor     reduce using rule 11 (command -> setpos [ value value ] .)
    make            reduce using rule 11 (command -> setpos [ value value ] .)
    if              reduce using rule 11 (command -> setpos [ value value ] .)
    ifelse          reduce using rule 11 (command -> setpos [ value value ] .)
    repeat          reduce using rule 11 (command -> setpos [ value value ] .)
    while           reduce using rule 11 (command -> setpos [ value value ] .)
    to              reduce using rule 11 (command -> setpos [ value value ] .)
    STR             reduce using rule 11 (command -> setpos [ value value ] .)
    stop            reduce using rule 11 (command -> setpos [ value value ] .)
    $end            reduce using rule 11 (command -> setpos [ value value ] .)
    ]               reduce using rule 11 (command -> setpos [ value value ] .)
    end             reduce using rule 11 (command -> setpos [ value value ] .)


state 82

    (21) color -> value value value .
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    ]               reduce using rule 21 (color -> value value value .)
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 83

    (29) command -> if value SIGN value [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . forward value
    (4) command -> . fd value
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (28) command -> . make VAR value
    (29) command -> . if value SIGN value [ program ]
    (30) command -> . ifelse value SIGN value [ program ]
    (31) command -> . repeat value [ program ]
    (32) command -> . while [ value SIGN value ] [ program ]
    (33) command -> . to STR varlist program end
    (37) command -> . STR valuelist
    (41) command -> . stop

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24
    to              shift and go to state 25
    STR             shift and go to state 26
    stop            shift and go to state 27

    program                        shift and go to state 88
    command                        shift and go to state 2

state 84

    (30) command -> ifelse value SIGN value [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . forward value
    (4) command -> . fd value
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (28) command -> . make VAR value
    (29) command -> . if value SIGN value [ program ]
    (30) command -> . ifelse value SIGN value [ program ]
    (31) command -> . repeat value [ program ]
    (32) command -> . while [ value SIGN value ] [ program ]
    (33) command -> . to STR varlist program end
    (37) command -> . STR valuelist
    (41) command -> . stop

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24
    to              shift and go to state 25
    STR             shift and go to state 26
    stop            shift and go to state 27

    program                        shift and go to state 89
    command                        shift and go to state 2

state 85

    (31) command -> repeat value [ program ] .

    forward         reduce using rule 31 (command -> repeat value [ program ] .)
    fd              reduce using rule 31 (command -> repeat value [ program ] .)
    right           reduce using rule 31 (command -> repeat value [ program ] .)
    rt              reduce using rule 31 (command -> repeat value [ program ] .)
    left            reduce using rule 31 (command -> repeat value [ program ] .)
    lt              reduce using rule 31 (command -> repeat value [ program ] .)
    back            reduce using rule 31 (command -> repeat value [ program ] .)
    bk              reduce using rule 31 (command -> repeat value [ program ] .)
    setpos          reduce using rule 31 (command -> repeat value [ program ] .)
    setx            reduce using rule 31 (command -> repeat value [ program ] .)
    sety            reduce using rule 31 (command -> repeat value [ program ] .)
    home            reduce using rule 31 (command -> repeat value [ program ] .)
    pendown         reduce using rule 31 (command -> repeat value [ program ] .)
    pd              reduce using rule 31 (command -> repeat value [ program ] .)
    penup           reduce using rule 31 (command -> repeat value [ program ] .)
    pu              reduce using rule 31 (command -> repeat value [ program ] .)
    setpencolor     reduce using rule 31 (command -> repeat value [ program ] .)
    make            reduce using rule 31 (command -> repeat value [ program ] .)
    if              reduce using rule 31 (command -> repeat value [ program ] .)
    ifelse          reduce using rule 31 (command -> repeat value [ program ] .)
    repeat          reduce using rule 31 (command -> repeat value [ program ] .)
    while           reduce using rule 31 (command -> repeat value [ program ] .)
    to              reduce using rule 31 (command -> repeat value [ program ] .)
    STR             reduce using rule 31 (command -> repeat value [ program ] .)
    stop            reduce using rule 31 (command -> repeat value [ program ] .)
    $end            reduce using rule 31 (command -> repeat value [ program ] .)
    ]               reduce using rule 31 (command -> repeat value [ program ] .)
    end             reduce using rule 31 (command -> repeat value [ program ] .)


state 86

    (32) command -> while [ value SIGN value . ] [ program ]
    (24) value -> value . + value
    (25) value -> value . - value
    (26) value -> value . * value
    (27) value -> value . / value

    ]               shift and go to state 90
    +               shift and go to state 52
    -               shift and go to state 53
    *               shift and go to state 54
    /               shift and go to state 55


state 87

    (33) command -> to STR varlist program end .

    forward         reduce using rule 33 (command -> to STR varlist program end .)
    fd              reduce using rule 33 (command -> to STR varlist program end .)
    right           reduce using rule 33 (command -> to STR varlist program end .)
    rt              reduce using rule 33 (command -> to STR varlist program end .)
    left            reduce using rule 33 (command -> to STR varlist program end .)
    lt              reduce using rule 33 (command -> to STR varlist program end .)
    back            reduce using rule 33 (command -> to STR varlist program end .)
    bk              reduce using rule 33 (command -> to STR varlist program end .)
    setpos          reduce using rule 33 (command -> to STR varlist program end .)
    setx            reduce using rule 33 (command -> to STR varlist program end .)
    sety            reduce using rule 33 (command -> to STR varlist program end .)
    home            reduce using rule 33 (command -> to STR varlist program end .)
    pendown         reduce using rule 33 (command -> to STR varlist program end .)
    pd              reduce using rule 33 (command -> to STR varlist program end .)
    penup           reduce using rule 33 (command -> to STR varlist program end .)
    pu              reduce using rule 33 (command -> to STR varlist program end .)
    setpencolor     reduce using rule 33 (command -> to STR varlist program end .)
    make            reduce using rule 33 (command -> to STR varlist program end .)
    if              reduce using rule 33 (command -> to STR varlist program end .)
    ifelse          reduce using rule 33 (command -> to STR varlist program end .)
    repeat          reduce using rule 33 (command -> to STR varlist program end .)
    while           reduce using rule 33 (command -> to STR varlist program end .)
    to              reduce using rule 33 (command -> to STR varlist program end .)
    STR             reduce using rule 33 (command -> to STR varlist program end .)
    stop            reduce using rule 33 (command -> to STR varlist program end .)
    $end            reduce using rule 33 (command -> to STR varlist program end .)
    ]               reduce using rule 33 (command -> to STR varlist program end .)
    end             reduce using rule 33 (command -> to STR varlist program end .)


state 88

    (29) command -> if value SIGN value [ program . ]
    (2) program -> program . command
    (3) command -> . forward value
    (4) command -> . fd value
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (28) command -> . make VAR value
    (29) command -> . if value SIGN value [ program ]
    (30) command -> . ifelse value SIGN value [ program ]
    (31) command -> . repeat value [ program ]
    (32) command -> . while [ value SIGN value ] [ program ]
    (33) command -> . to STR varlist program end
    (37) command -> . STR valuelist
    (41) command -> . stop

    ]               shift and go to state 91
    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24
    to              shift and go to state 25
    STR             shift and go to state 26
    stop            shift and go to state 27

    command                        shift and go to state 28

state 89

    (30) command -> ifelse value SIGN value [ program . ]
    (2) program -> program . command
    (3) command -> . forward value
    (4) command -> . fd value
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (28) command -> . make VAR value
    (29) command -> . if value SIGN value [ program ]
    (30) command -> . ifelse value SIGN value [ program ]
    (31) command -> . repeat value [ program ]
    (32) command -> . while [ value SIGN value ] [ program ]
    (33) command -> . to STR varlist program end
    (37) command -> . STR valuelist
    (41) command -> . stop

    ]               shift and go to state 92
    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24
    to              shift and go to state 25
    STR             shift and go to state 26
    stop            shift and go to state 27

    command                        shift and go to state 28

state 90

    (32) command -> while [ value SIGN value ] . [ program ]

    [               shift and go to state 93


state 91

    (29) command -> if value SIGN value [ program ] .

    forward         reduce using rule 29 (command -> if value SIGN value [ program ] .)
    fd              reduce using rule 29 (command -> if value SIGN value [ program ] .)
    right           reduce using rule 29 (command -> if value SIGN value [ program ] .)
    rt              reduce using rule 29 (command -> if value SIGN value [ program ] .)
    left            reduce using rule 29 (command -> if value SIGN value [ program ] .)
    lt              reduce using rule 29 (command -> if value SIGN value [ program ] .)
    back            reduce using rule 29 (command -> if value SIGN value [ program ] .)
    bk              reduce using rule 29 (command -> if value SIGN value [ program ] .)
    setpos          reduce using rule 29 (command -> if value SIGN value [ program ] .)
    setx            reduce using rule 29 (command -> if value SIGN value [ program ] .)
    sety            reduce using rule 29 (command -> if value SIGN value [ program ] .)
    home            reduce using rule 29 (command -> if value SIGN value [ program ] .)
    pendown         reduce using rule 29 (command -> if value SIGN value [ program ] .)
    pd              reduce using rule 29 (command -> if value SIGN value [ program ] .)
    penup           reduce using rule 29 (command -> if value SIGN value [ program ] .)
    pu              reduce using rule 29 (command -> if value SIGN value [ program ] .)
    setpencolor     reduce using rule 29 (command -> if value SIGN value [ program ] .)
    make            reduce using rule 29 (command -> if value SIGN value [ program ] .)
    if              reduce using rule 29 (command -> if value SIGN value [ program ] .)
    ifelse          reduce using rule 29 (command -> if value SIGN value [ program ] .)
    repeat          reduce using rule 29 (command -> if value SIGN value [ program ] .)
    while           reduce using rule 29 (command -> if value SIGN value [ program ] .)
    to              reduce using rule 29 (command -> if value SIGN value [ program ] .)
    STR             reduce using rule 29 (command -> if value SIGN value [ program ] .)
    stop            reduce using rule 29 (command -> if value SIGN value [ program ] .)
    $end            reduce using rule 29 (command -> if value SIGN value [ program ] .)
    ]               reduce using rule 29 (command -> if value SIGN value [ program ] .)
    end             reduce using rule 29 (command -> if value SIGN value [ program ] .)


state 92

    (30) command -> ifelse value SIGN value [ program ] .

    forward         reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    fd              reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    right           reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    rt              reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    left            reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    lt              reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    back            reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    bk              reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    setpos          reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    setx            reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    sety            reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    home            reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    pendown         reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    pd              reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    penup           reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    pu              reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    setpencolor     reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    make            reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    if              reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    ifelse          reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    repeat          reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    while           reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    to              reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    STR             reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    stop            reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    $end            reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    ]               reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)
    end             reduce using rule 30 (command -> ifelse value SIGN value [ program ] .)


state 93

    (32) command -> while [ value SIGN value ] [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . forward value
    (4) command -> . fd value
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (28) command -> . make VAR value
    (29) command -> . if value SIGN value [ program ]
    (30) command -> . ifelse value SIGN value [ program ]
    (31) command -> . repeat value [ program ]
    (32) command -> . while [ value SIGN value ] [ program ]
    (33) command -> . to STR varlist program end
    (37) command -> . STR valuelist
    (41) command -> . stop

    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24
    to              shift and go to state 25
    STR             shift and go to state 26
    stop            shift and go to state 27

    program                        shift and go to state 94
    command                        shift and go to state 2

state 94

    (32) command -> while [ value SIGN value ] [ program . ]
    (2) program -> program . command
    (3) command -> . forward value
    (4) command -> . fd value
    (5) command -> . right value
    (6) command -> . rt value
    (7) command -> . left value
    (8) command -> . lt value
    (9) command -> . back value
    (10) command -> . bk value
    (11) command -> . setpos [ value value ]
    (12) command -> . setpos value value
    (13) command -> . setx value
    (14) command -> . sety value
    (15) command -> . home
    (16) command -> . pendown
    (17) command -> . pd
    (18) command -> . penup
    (19) command -> . pu
    (20) command -> . setpencolor [ color ]
    (28) command -> . make VAR value
    (29) command -> . if value SIGN value [ program ]
    (30) command -> . ifelse value SIGN value [ program ]
    (31) command -> . repeat value [ program ]
    (32) command -> . while [ value SIGN value ] [ program ]
    (33) command -> . to STR varlist program end
    (37) command -> . STR valuelist
    (41) command -> . stop

    ]               shift and go to state 95
    forward         shift and go to state 3
    fd              shift and go to state 4
    right           shift and go to state 5
    rt              shift and go to state 6
    left            shift and go to state 7
    lt              shift and go to state 8
    back            shift and go to state 9
    bk              shift and go to state 10
    setpos          shift and go to state 11
    setx            shift and go to state 12
    sety            shift and go to state 13
    home            shift and go to state 14
    pendown         shift and go to state 15
    pd              shift and go to state 16
    penup           shift and go to state 17
    pu              shift and go to state 18
    setpencolor     shift and go to state 19
    make            shift and go to state 20
    if              shift and go to state 21
    ifelse          shift and go to state 22
    repeat          shift and go to state 23
    while           shift and go to state 24
    to              shift and go to state 25
    STR             shift and go to state 26
    stop            shift and go to state 27

    command                        shift and go to state 28

state 95

    (32) command -> while [ value SIGN value ] [ program ] .

    forward         reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    fd              reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    right           reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    rt              reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    left            reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    lt              reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    back            reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    bk              reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    setpos          reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    setx            reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    sety            reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    home            reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    pendown         reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    pd              reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    penup           reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    pu              reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    setpencolor     reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    make            reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    if              reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    ifelse          reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    repeat          reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    while           reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    to              reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    STR             reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    stop            reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    $end            reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    ]               reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)
    end             reduce using rule 32 (command -> while [ value SIGN value ] [ program ] .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NUMBER in state 26 resolved as shift
WARNING: shift/reduce conflict for VAR in state 26 resolved as shift
WARNING: shift/reduce conflict for VAR in state 49 resolved as shift
